<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="381" failures="0" errors="0" time="0.976066464">
    <testsuite name="tests/integration/main-ipc.test.ts" timestamp="2025-07-04T22:10:41.090Z" hostname="DESKTOP-HR2BSFJ" tests="31" failures="0" errors="0" skipped="0" time="0.015328314">
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:get" time="0.001934422">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:update" time="0.00031779">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:reset" time="0.000260779">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:export" time="0.000530675">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:import" time="0.000347611">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle invalid JSON in settings:import" time="0.000454228">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:test-provider with healthy provider" time="0.000505965">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:test-provider with unhealthy provider" time="0.000279398">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:test-provider with missing provider" time="0.000280452">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:get-models successfully" time="0.000495492">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:get-models with error" time="0.000476872">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:send-message successfully" time="0.000228793">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:send-message with error" time="0.000287527">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:get-status successfully" time="0.000240057">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:add-server successfully" time="0.000988405">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:add-server with error" time="0.000190172">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:remove-server successfully" time="0.000292329">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:update-server successfully" time="0.000510105">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:get-servers successfully" time="0.000274744">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:get-pending" time="0.000275778">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:respond successfully" time="0.00027982">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:respond with failure" time="0.00012878">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:get-all" time="0.000227129">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:revoke successfully" time="0.000314443">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:clear-session" time="0.00043058">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:update-settings" time="0.000317327">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:get-settings" time="0.000248991">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Error Handling &gt; should handle unexpected errors in handlers" time="0.000449282">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Error Handling &gt; should handle non-Error objects thrown" time="0.000246373">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Cross-Module Integration &gt; should handle full workflow: add provider, test, and send message" time="0.000787393">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Cross-Module Integration &gt; should handle MCP server and permissions workflow" time="0.00096308">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/mcp-integration.test.ts" timestamp="2025-07-04T22:10:41.096Z" hostname="DESKTOP-HR2BSFJ" tests="7" failures="0" errors="0" skipped="0" time="0.038264988">
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Complete Server Lifecycle &gt; should handle complete server lifecycle from creation to destruction" time="0.009753017">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Executing tool test-tool on server integration-test-server { args: { testParam: [32m&apos;value&apos;[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Reading resource file://test.txt from server integration-test-server

Resource read completed for file://test.txt

Executing prompt test-prompt on server integration-test-server { args: { context: [32m&apos;test&apos;[39m } }

Prompt execution completed for test-prompt

Subscribed to resource file://test.txt on integration-test-server

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Complete Server Lifecycle &gt; should handle server failure and recovery" time="0.004428411">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

Stopping MCP server: Integration Test Server
Successfully stopped MCP server: Integration Test Server

Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Error Handling and Edge Cases &gt; should handle tool execution errors gracefully" time="0.003742564">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Executing tool test-tool on server integration-test-server { args: {} }

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Error Handling and Edge Cases &gt; should handle resource reading errors" time="0.003308617">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Reading resource file://nonexistent.txt from server integration-test-server

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Error Handling and Edge Cases &gt; should handle server process crashes" time="0.006868097">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Resource Subscription Management &gt; should handle resource subscription lifecycle" time="0.005656391">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Subscribed to resource file://dynamic-resource.txt on integration-test-server

Unsubscribed from resource file://dynamic-resource.txt on integration-test-server

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Performance and Concurrency &gt; should handle concurrent tool executions" time="0.002969997">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Executing tool test-tool on server integration-test-server { args: { index: [33m0[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Executing tool test-tool on server integration-test-server { args: { index: [33m1[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Executing tool test-tool on server integration-test-server { args: { index: [33m2[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/security/IPCSecurity.test.ts" timestamp="2025-07-04T22:10:41.104Z" hostname="DESKTOP-HR2BSFJ" tests="23" failures="0" errors="0" skipped="0" time="0.083951488">
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Schema Validation &gt; should validate basic string schemas" time="0.002540768">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Schema Validation &gt; should validate server ID format" time="0.000937568">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Schema Validation &gt; should validate tool names" time="0.00054166">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Schema Validation &gt; should validate file paths and prevent traversal" time="0.000693245">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Schema Validation &gt; should validate complex nested objects" time="0.002070073">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Schema Validation &gt; should validate settings objects" time="0.000917289">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Input Sanitization &gt; should handle string length limits" time="0.0006563">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Input Sanitization &gt; should validate array length limits" time="0.000944429">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Input Sanitization &gt; should validate numeric ranges" time="0.001325194">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Security Feature Configuration &gt; should have schemas for all critical IPC channels" time="0.063266325">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Security Feature Configuration &gt; should have rate limits for sensitive operations" time="0.000745505">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Security Feature Configuration &gt; should classify operation sensitivity correctly" time="0.000532332">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Real-world Attack Scenarios &gt; should prevent SQL injection-style attacks in string inputs" time="0.000727194">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Real-world Attack Scenarios &gt; should prevent path traversal attacks" time="0.000726883">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Real-world Attack Scenarios &gt; should prevent command injection in server configurations" time="0.000346868">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Real-world Attack Scenarios &gt; should handle DoS attacks via large inputs" time="0.003888846">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Real-world Attack Scenarios &gt; should validate complex nested attack payloads" time="0.000565646">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Edge Cases and Error Handling &gt; should handle null and undefined inputs gracefully" time="0.000382011">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Edge Cases and Error Handling &gt; should handle type coercion attempts" time="0.000185447">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Edge Cases and Error Handling &gt; should handle circular reference attempts" time="0.000139183">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Edge Cases and Error Handling &gt; should validate Unicode and special characters" time="0.000164018">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Performance and Resource Limits &gt; should enforce reasonable limits for production use" time="0.000177976">
        </testcase>
        <testcase classname="tests/security/IPCSecurity.test.ts" name="IPC Security Tests &gt; Performance and Resource Limits &gt; should validate rate limit configurations" time="0.000150161">
        </testcase>
    </testsuite>
    <testsuite name="tests/utils/SessionManager.test.ts" timestamp="2025-07-04T22:10:41.109Z" hostname="DESKTOP-HR2BSFJ" tests="4" failures="0" errors="0" skipped="0" time="0.008918505">
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; creates a new session and sets it as current" time="0.003041654">
            <system-out>
SessionManager: No app storage found, checking for legacy chat history...
SessionManager: No legacy data found, creating default storage
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751667040560_l1dpitw8l

            </system-out>
        </testcase>
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; renames an existing session" time="0.000706701">
            <system-out>
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751667040561_0z7uo7d7r
SessionManager: Updated session: session_1751667040561_0z7uo7d7r

            </system-out>
        </testcase>
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; prunes old sessions beyond max cap" time="0.002814472">
            <system-out>
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751667040562_jxr36lami
SessionManager: Created new session: session_1751667040562_qzll20jti
SessionManager: Created new session: session_1751667040562_6cytb8a0m
SessionManager: Created new session: session_1751667040563_0wj8o7w9n
SessionManager: Created new session: session_1751667040563_axw4ue2lx
SessionManager: Created new session: session_1751667040563_kj3a4cyce
SessionManager: Created new session: session_1751667040563_obv05qxkn
SessionManager: Created new session: session_1751667040563_pw0f92gau
SessionManager: Created new session: session_1751667040563_he1jzp4h0
SessionManager: Created new session: session_1751667040563_9h0dkcrgl
SessionManager: Deleted session: session_1751667040562_jxr36lami
SessionManager: Deleted session: session_1751667040562_qzll20jti
SessionManager: Deleted session: session_1751667040562_6cytb8a0m
SessionManager: Deleted session: session_1751667040563_0wj8o7w9n
SessionManager: Deleted session: session_1751667040563_axw4ue2lx

            </system-out>
        </testcase>
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; clears all sessions" time="0.001170547">
            <system-out>
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751667040565_isna0rw27
SessionManager: Created new session: session_1751667040565_4wxj04sjc
SessionManager: Created new session: session_1751667040565_hvr15ouhv
SessionManager: Cleared all sessions

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/renderer/components/SessionSidebar.test.tsx" timestamp="2025-07-04T22:10:41.112Z" hostname="DESKTOP-HR2BSFJ" tests="1" failures="0" errors="0" skipped="0" time="0.028510733">
        <testcase classname="tests/renderer/components/SessionSidebar.test.tsx" name="SessionSidebar &gt; creates a new chat when clicking + New Chat" time="0.027800219">
            <system-out>
SessionManager: No app storage found, checking for legacy chat history...
SessionManager: No legacy data found, creating default storage
SessionContext: Loading initial session data...
SessionContext: Loaded [33m0[39m sessions, current: [90mundefined[39m
SessionContext: Creating new session with options: {}
SessionManager: Created new session: session_1751667040812_sl2pddid9
SessionContext: Created and switched to new session: session_1751667040812_sl2pddid9

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/config/ConfigManager.test.ts" timestamp="2025-07-04T22:10:41.113Z" hostname="DESKTOP-HR2BSFJ" tests="38" failures="0" errors="0" skipped="0" time="0.022351294">
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should initialize with default settings when no config file exists" time="0.003483326">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should load existing configuration when config file exists" time="0.000880432">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should handle config file read errors gracefully" time="0.000638311">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should handle invalid JSON gracefully" time="0.000418525">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should use fallback path when userData path fails" time="0.001515265">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should update general settings" time="0.000632164">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should update LLM providers" time="0.000344689">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should update MCP servers" time="0.000325808">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should handle update errors" time="0.000856746">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should return deep copy of settings" time="0.001441724">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should add LLM provider" time="0.000417572">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should update LLM provider by ID" time="0.000220899">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should remove LLM provider" time="0.000328563">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should clear default provider when removing it" time="0.000295708">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should find best default provider model" time="0.000307188">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should return undefined when no enabled provider with model exists" time="0.000215276">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should set and get default provider model" time="0.000231911">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should add MCP server" time="0.000637587">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should update existing MCP server when adding with same ID" time="0.000859741">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should remove MCP server" time="0.000433921">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should handle removing non-existent MCP server" time="0.000279788">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should update MCP server" time="0.000319604">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should throw error when updating non-existent MCP server" time="0.000281127">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should validate valid settings" time="0.000420946">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject invalid theme" time="0.000182772">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject invalid provider type" time="0.000160839">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject invalid MCP server structure" time="0.000219134">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject non-object settings" time="0.000194042">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should export settings as JSON string" time="0.000440569">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should import valid settings" time="0.000297563">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should reject invalid JSON during import" time="0.000353629">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should reject invalid settings during import" time="0.000246236">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Deduplication &gt; should deduplicate providers by type" time="0.00045658">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Deduplication &gt; should ensure required default providers exist" time="0.000222084">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Reset to Defaults &gt; should reset all settings to defaults" time="0.000334135">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Migration and Merging &gt; should merge partial user settings with defaults" time="0.000526289">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Migration and Merging &gt; should handle migration of LLM settings" time="0.000476691">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Migration and Merging &gt; should use defaults when LLM providers are invalid" time="0.000324677">
        </testcase>
    </testsuite>
    <testsuite name="tests/main/llm/LlmManager.test.ts" timestamp="2025-07-04T22:10:41.119Z" hostname="DESKTOP-HR2BSFJ" tests="49" failures="0" errors="0" skipped="0" time="0.037517645">
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Initialization &gt; should initialize successfully" time="0.002926738">
            <system-out>
Initializing LLM Manager
LLM Manager initialized successfully

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Initialization &gt; should set max listeners to 50" time="0.000379466">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should add Ollama provider" time="0.000830254">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should add OpenRouter provider" time="0.000361773">
            <system-out>
LLM provider added: Test Provider (openrouter)

Health check for test-provider: unhealthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should reject unsupported provider type" time="0.001182542">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should remove provider" time="0.001654135">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider removed: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should handle removing non-existent provider" time="0.000394529">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should update provider config" time="0.002288352">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should throw error when updating non-existent provider" time="0.000759302">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should check health when provider is enabled" time="0.000834898">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should mark as unhealthy when provider is disabled" time="0.000426751">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should get all providers" time="0.00027121">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should emit events for provider operations" time="0.001102929">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

LLM provider removed: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should check provider health" time="0.000622771">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should return false for non-existent provider health check" time="0.000316546">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should handle health check failures" time="0.000291759">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should implement exponential backoff for retries" time="0.000494896">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: unhealthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should reset retry count on successful health check" time="0.000537046">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: unhealthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should check all providers health" time="0.000543102">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider added: Test Provider (openrouter)

Health check for openrouter-provider: healthy

Health check for test-provider: healthy
Health check for openrouter-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should skip health check for disabled providers" time="0.000276445">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should skip health check if retry time not reached" time="0.000332372">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should get all provider health" time="0.00032081">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should emit health change events" time="0.00065336">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should send message successfully" time="0.002112478">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should merge provider config with options" time="0.001028">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should throw error for non-existent provider" time="0.000504432">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should throw error for disabled provider" time="0.00040259">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should attempt recovery for unhealthy provider" time="0.000224321">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should throw error if recovery fails" time="0.000214158">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: unhealthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should handle message processing errors" time="0.000242631">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should emit events for message processing" time="0.000764196">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should reset retry count on successful message" time="0.000316902">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Model Management &gt; should get available models" time="0.000547315">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Model Management &gt; should return empty array for non-existent provider" time="0.00025983">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Model Management &gt; should handle model fetching errors" time="0.00030152">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should get status with enabled providers" time="0.000721721">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

[LlmManager] getStatus: Gathering status for providers...
  → Provider test-provider: name=&quot;Test Provider&quot; type=ollama enabled=true
[LlmManager] getStatus: Processing enabled provider test-provider

    • test-provider health=true models=1
[LlmManager] getStatus: Returning 1 enabled providers

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should exclude disabled providers from status" time="0.000456728">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

[LlmManager] getStatus: Gathering status for providers...
  → Provider test-provider: name=&quot;Test Provider&quot; type=ollama enabled=false
[LlmManager] getStatus: Returning 0 enabled providers

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - valid case" time="0.003273071">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - removed provider" time="0.000423097">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - disabled provider" time="0.000366526">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - unhealthy provider" time="0.000624592">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Shutdown &gt; should shutdown cleanly" time="0.00077178">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Shutting down LLM Manager
LLM Manager shutdown complete

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Shutdown &gt; should remove all listeners on shutdown" time="0.00042014">
            <system-out>
Shutting down LLM Manager
LLM Manager shutdown complete

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider ID Generation &gt; should use provided ID" time="0.000594767">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for custom-id: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider ID Generation &gt; should generate ID from type and name when not provided" time="0.000390973">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for ollama-test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider ID Generation &gt; should handle names with spaces and special characters" time="0.000324313">
            <system-out>
LLM provider added: Test Provider With Spaces (ollama)

Health check for ollama-test-provider-with-spaces: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Edge Cases &gt; should handle multiple providers of same type" time="0.000645621">
            <system-out>
LLM provider added: Ollama 1 (ollama)

Health check for ollama-1: healthy

LLM provider added: Ollama 2 (ollama)

Health check for ollama-2: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Edge Cases &gt; should handle provider config updates with undefined values" time="0.000820494">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Edge Cases &gt; should handle health check with no initial health status" time="0.000488162">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/mcp/ConnectionManager.test.ts" timestamp="2025-07-04T22:10:41.141Z" hostname="DESKTOP-HR2BSFJ" tests="57" failures="0" errors="0" skipped="0" time="0.202225905">
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should successfully start a STDIO server" time="0.006048208">
            <system-out>
Starting MCP server: Test Server (test-server)

MCP server ready: Test Server {
  tools: [ { name: [32m&apos;test-tool&apos;[39m, description: [32m&apos;Test tool&apos;[39m, inputSchema: {} } ]
}

Discovered tools for test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

Successfully started MCP server: Test Server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should successfully start an HTTP server" time="0.004268525">
            <system-out>
Starting MCP server: Test HTTP Server (test-http-server)

MCP server ready: Test HTTP Server { tools: [] }

Discovered tools for test-http-server: [33m0[39m []

Discovered resources for test-http-server: [33m0[39m

Discovered prompts for test-http-server: [33m0[39m

Successfully started MCP server: Test HTTP Server

Stopping MCP server: Test HTTP Server

Successfully stopped MCP server: Test HTTP Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle Windows command resolution" time="0.004233194">
            <system-out>
Starting MCP server: Test Server (test-server)

MCP server ready: Test Server { tools: [] }

Discovered tools for test-server: [33m0[39m []

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

Successfully started MCP server: Test Server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle command with spaces and quotes" time="0.003302337">
            <system-out>
Starting MCP server: Test Server (test-server)

MCP server ready: Test Server { tools: [] }

Discovered tools for test-server: [33m0[39m []

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

Successfully started MCP server: Test Server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle maximum server limit" time="0.00913237">
            <system-out>
Stopping MCP server: Server 0
Stopping MCP server: Server 1
Stopping MCP server: Server 2
Stopping MCP server: Server 3
Stopping MCP server: Server 4
Stopping MCP server: Server 5
Stopping MCP server: Server 6
Stopping MCP server: Server 7

Successfully stopped MCP server: Server 0

Successfully stopped MCP server: Server 1

Successfully stopped MCP server: Server 2

Successfully stopped MCP server: Server 3

Successfully stopped MCP server: Server 4

Successfully stopped MCP server: Server 5

Successfully stopped MCP server: Server 6

Successfully stopped MCP server: Server 7

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle server already running" time="0.002226333">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle MCP SDK loading failure" time="0.001898164">
            <system-out>
Starting MCP server: Test Server (test-server)

Stopping MCP server: Test Server
Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle client connection failure" time="0.001581922">
            <system-out>
Starting MCP server: Test Server (test-server)

Stopping MCP server: Test Server
Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle missing command for STDIO transport" time="0.001045445">
            <system-out>
Starting MCP server: Test Server (test-server)

Stopping MCP server: Test Server
Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should set up environment variables correctly" time="0.001445109">
            <system-out>
Starting MCP server: Test Server (test-server)

MCP server ready: Test Server { tools: [] }

Discovered tools for test-server: [33m0[39m []

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

Successfully started MCP server: Test Server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should successfully stop a running server" time="0.002545045">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should handle stopping non-existent server gracefully" time="0.001410304">
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should handle client close failure" time="0.002627185">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should kill process if client close fails" time="0.004656891">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopAllServers &gt; should stop all running servers" time="0.003957496">
            <system-out>
Stopping MCP server: Test Server
Stopping MCP server: Test Server
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should execute a tool with permission" time="0.007168932">
            <system-out>
Executing tool test-tool on server test-server { args: { arg1: [32m&apos;value1&apos;[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;success&apos;[39m } }

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when server not found" time="0.002913491">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when server not ready" time="0.002872355">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when tool not found" time="0.005063054">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when permission denied" time="0.002981949">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should handle tool execution errors" time="0.00536501">
            <system-out>
Executing tool test-tool on server test-server { args: {} }

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAvailableTools &gt; should return tools for a specific server" time="0.004463368">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAvailableTools &gt; should return empty array for non-existent server" time="0.004228956">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAvailableTools &gt; should return empty array for server without tools" time="0.003157521">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAllAvailableTools &gt; should return tools from all servers" time="0.004655707">
            <system-out>
Stopping MCP server: Test Server
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should read a resource successfully" time="0.00202888">
            <system-out>
Reading resource file://test.txt from server test-server

Resource read completed for file://test.txt

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should reject when server not found" time="0.002576802">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should reject when server not ready" time="0.004415769">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should handle read errors" time="0.006683925">
            <system-out>
Reading resource file://test.txt from server test-server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; subscribeToResource &gt; should subscribe to a resource successfully" time="0.004350644">
            <system-out>
Subscribed to resource file://test.txt on test-server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; subscribeToResource &gt; should handle already subscribed resources" time="0.003429848">
            <system-out>
Already subscribed to resource file://test.txt on test-server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; subscribeToResource &gt; should handle subscription errors" time="0.004364137">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; unsubscribeFromResource &gt; should unsubscribe from a resource successfully" time="0.005189954">
            <system-out>
Unsubscribed from resource file://test.txt on test-server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; unsubscribeFromResource &gt; should handle not subscribed resources" time="0.00451842">
            <system-out>
Unsubscribed from resource file://test.txt on test-server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; getAvailableResources &gt; should return resources for a specific server" time="0.00708997">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; getAvailableResources &gt; should return empty array for non-existent server" time="0.004246542">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; getAllAvailableResources &gt; should return resources from all servers" time="0.004269644">
            <system-out>
Stopping MCP server: Test Server
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should execute a prompt successfully" time="0.003919199">
            <system-out>
Executing prompt test-prompt on server test-server { args: { arg1: [32m&apos;value1&apos;[39m } }

Prompt execution completed for test-prompt

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should execute prompt without arguments" time="0.003550065">
            <system-out>
Executing prompt test-prompt on server test-server { args: [90mundefined[39m }

Prompt execution completed for test-prompt

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should reject when server not found" time="0.00280329">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should reject when prompt not found" time="0.002355611">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should handle prompt execution errors" time="0.0041116">
            <system-out>
Executing prompt test-prompt on server test-server { args: [90mundefined[39m }

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; getAvailablePrompts &gt; should return prompts for a specific server" time="0.002463756">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; getAvailablePrompts &gt; should return empty array for non-existent server" time="0.003104869">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; getAllAvailablePrompts &gt; should return prompts from all servers" time="0.003343991">
            <system-out>
Stopping MCP server: Test Server
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; State Management &gt; should get server state" time="0.002778574">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; State Management &gt; should return null for non-existent server state" time="0.000943034">
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; State Management &gt; should get all server states" time="0.00286434">
            <system-out>
Stopping MCP server: Test Server
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; sampleLLM &gt; should handle LLM sampling requests" time="0.002745182">
            <system-out>
Warning: sampleLLM called directly - this should go through normal tool execution

Executing tool sampleLLM on server test-server {
  args: {
    messages: [ [36m[Object][39m ],
    maxTokens: [33m100[39m,
    temperature: [33m0.7[39m,
    stopSequences: [90mundefined[39m,
    modelPreferences: [90mundefined[39m
  }
}

Tool execution completed for sampleLLM { result: { content: [32m&apos;LLM response&apos;[39m } }

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; sampleLLM &gt; should reject when server not found" time="0.001471809">
            <system-out>
Warning: sampleLLM called directly - this should go through normal tool execution

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; sampleLLM &gt; should handle sampling errors gracefully" time="0.00558319">
            <system-out>
Warning: sampleLLM called directly - this should go through normal tool execution

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should discover tools correctly" time="0.001330541">
            <system-out>
Discovered tools for test-server: [33m2[39m [ [32m&apos;tool1&apos;[39m, [32m&apos;tool2&apos;[39m ]

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should discover resources correctly" time="0.001260326">
            <system-out>
Discovered resources for test-server: [33m2[39m

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should discover prompts correctly" time="0.001468893">
            <system-out>
Discovered prompts for test-server: [33m2[39m

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should handle discovery errors gracefully" time="0.00098192">
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Resource Refresh &gt; should refresh server resources" time="0.003201945">
            <system-out>
Discovered resources for test-server: [33m1[39m

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Resource Refresh &gt; should handle refresh errors gracefully" time="0.002777671">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/permissions/PermissionManager.test.ts" timestamp="2025-07-04T22:10:41.164Z" hostname="DESKTOP-HR2BSFJ" tests="18" failures="0" errors="0" skipped="0" time="0.016114241">
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Initialization &gt; should initialize with default settings" time="0.004872962">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Initialization &gt; should set max listeners to 50" time="0.00100317">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Auto-Approval &gt; should auto-approve for trusted servers" time="0.000677965">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Auto-Approval &gt; should auto-approve based on risk level settings" time="0.00027355">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should revoke permissions" time="0.000593403">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should handle revoking non-existent permissions" time="0.000266402">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should clear all permissions" time="0.000196219">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should update settings" time="0.000270718">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should manage trusted servers" time="0.000903437">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Session Management &gt; should clear session permissions" time="0.000527114">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Approval Request Handling &gt; should timeout approval requests" time="0.001091332">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Approval Request Handling &gt; should handle invalid approval responses" time="0.000456169">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Approval Request Handling &gt; should emit permission request events" time="0.001308077">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Shutdown &gt; should clean up all resources on shutdown" time="0.000484283">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle empty permission key generation" time="0.000308391">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle session key generation with various inputs" time="0.000268407">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle argument hashing with special characters" time="0.000409631">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle argument hashing with undefined/null values" time="0.000461145">
        </testcase>
    </testsuite>
    <testsuite name="tests/main/security/SecureStorage.test.ts" timestamp="2025-07-04T22:10:41.167Z" hostname="DESKTOP-HR2BSFJ" tests="22" failures="0" errors="0" skipped="0" time="0.011748303">
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Initialization &gt; should create singleton instance" time="0.001905667">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Initialization &gt; should check encryption availability on initialization" time="0.000431797">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Initialization &gt; should handle encryption not available" time="0.000180351">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should encrypt string successfully" time="0.001476089">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should decrypt string successfully" time="0.001298683">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should return null when encryption is not available" time="0.00038288">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should return null when decryption is not available" time="0.000282461">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should handle encryption errors gracefully" time="0.000245082">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should handle decryption errors gracefully" time="0.00052193">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management &gt; should store API key successfully" time="0.000581027">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management &gt; should retrieve API key successfully" time="0.000264012">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management &gt; should return null for non-encrypted values" time="0.000187414">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management &gt; should migrate plain text to encrypted format" time="0.00020196">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management &gt; should return original value if already encrypted" time="0.000108954">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management &gt; should detect encrypted values correctly" time="0.000153178">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should validate encryption successfully" time="0.000250587">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should fail validation when encryption is not available" time="0.000183413">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should fail validation on encryption error" time="0.000179645">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should fail validation on data mismatch" time="0.000125773">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Edge Cases &gt; should handle empty strings" time="0.00017987">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Edge Cases &gt; should handle null values" time="0.000179119">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Edge Cases &gt; should handle invalid inputs" time="0.000167086">
        </testcase>
    </testsuite>
    <testsuite name="tests/renderer/components/MCP/McpIntegration.test.tsx" timestamp="2025-07-04T22:10:41.171Z" hostname="DESKTOP-HR2BSFJ" tests="27" failures="0" errors="0" skipped="0" time="0.286515294">
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; renders without crashing" time="0.022021442">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; shows loading state initially" time="0.003286646">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; loads and displays servers successfully" time="0.013945401">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; displays empty state when no servers configured" time="0.032850074">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; displays error state when loading fails" time="0.005654147">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; handles network errors during loading" time="0.00481111">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Display and Status &gt; displays server status badges correctly" time="0.007308302">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Display and Status &gt; displays transport information correctly" time="0.007388248">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Display and Status &gt; displays status icons correctly" time="0.007540271">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; toggles server enabled state successfully" time="0.012816747">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; handles server toggle errors" time="0.008520741">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; removes server with confirmation" time="0.013720731">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; cancels server removal when user declines confirmation" time="0.008043512">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; handles server removal errors" time="0.011975061">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Wizard Integration &gt; opens server wizard when add server button is clicked" time="0.014735474">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Wizard Integration &gt; opens wizard from empty state" time="0.016952195">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Wizard Integration &gt; refreshes server list when server is added via wizard" time="0.015514055">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; handles undefined server data gracefully" time="0.001659789">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; handles malformed server data" time="0.003534878">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; retries loading on initial failure with user action" time="0.00463799">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; handles rapid server state changes" time="0.018420483">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; has proper ARIA labels and roles" time="0.011471203">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; supports keyboard navigation" time="0.007566443">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; provides clear loading states" time="0.010636714">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; provides clear error messages" time="0.007436667">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Integration with Settings &gt; calls onSettingsUpdate when servers change" time="0.007904473">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Integration with Settings &gt; reloads servers when settings prop changes" time="0.004589169">
        </testcase>
    </testsuite>
    <testsuite name="tests/renderer/components/MCP/McpServerWizard.test.tsx" timestamp="2025-07-04T22:10:41.175Z" hostname="DESKTOP-HR2BSFJ" tests="13" failures="0" errors="0" skipped="0" time="0.171002515">
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Basic Rendering &gt; renders without crashing when open" time="0.032356957">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Basic Rendering &gt; does not render when closed" time="0.001886173">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Basic Rendering &gt; displays wizard steps" time="0.007163988">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Form Validation &gt; validates server name is required" time="0.041671292">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Form Validation &gt; validates command for STDIO transport" time="0.037244982">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Connection Testing &gt; tests connection successfully" time="0.006473029">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Connection Testing &gt; handles connection test failure" time="0.005461939">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Server Creation &gt; creates server successfully" time="0.00683277">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Server Creation &gt; handles server creation error" time="0.008301699">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; User Interactions &gt; closes when close button is clicked" time="0.00574592">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; User Interactions &gt; calls onServerAdded when server is created" time="0.007700938">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Accessibility &gt; has proper ARIA labels" time="0.005096779">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Accessibility &gt; supports keyboard navigation" time="0.003537179">
        </testcase>
    </testsuite>
    <testsuite name="tests/main/llm/providers/OllamaProvider.test.ts" timestamp="2025-07-04T22:10:41.177Z" hostname="DESKTOP-HR2BSFJ" tests="45" failures="0" errors="0" skipped="0" time="0.024905017">
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Constructor &gt; should initialize with provided config" time="0.001326271">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Constructor &gt; should use default URL when none provided" time="0.000208629">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should test connection successfully" time="0.002469069">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle connection refused error" time="0.000448592">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle connection error with cause" time="0.000368797">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle HTTP errors" time="0.000241201">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle timeout errors" time="0.000281146">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should get available models successfully" time="0.001007962">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle empty model list" time="0.000563083">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle missing models property" time="0.000281339">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle connection error when getting models" time="0.000664627">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle HTTP error when getting models" time="0.00023164">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should format sizes correctly" time="0.000136599">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should send message successfully" time="0.000581155">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should send message with custom options" time="0.000247607">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should send message with tools" time="0.000294915">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should handle HTTP error when sending message" time="0.000204546">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should handle network error when sending message" time="0.000200862">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should handle finish reason based on done status" time="0.000104271">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should stream message successfully" time="0.001401821">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle streaming with custom options" time="0.000740536">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle HTTP error when streaming" time="0.0004006">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle missing response body when streaming" time="0.000390662">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle invalid JSON in streaming response" time="0.000682952">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle incomplete streaming data" time="0.001094574">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should release reader lock even on error" time="0.001148447">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should download model successfully" time="0.001116408">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should download model without progress callback" time="0.000577258">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should handle HTTP error when downloading" time="0.000415574">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should handle missing response body when downloading" time="0.000458568">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should handle invalid JSON in download response" time="0.000533582">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should release reader lock even on download error" time="0.000307536">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Deletion &gt; should delete model successfully" time="0.000350581">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Deletion &gt; should handle HTTP error when deleting model" time="0.000331917">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Deletion &gt; should handle network error when deleting model" time="0.000339528">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Formatting &gt; should format regular messages correctly" time="0.000208162">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Formatting &gt; should format tool response messages correctly" time="0.00020073">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Formatting &gt; should format messages with tool calls correctly" time="0.000235542">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle timeout errors properly" time="0.000191979">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle connection refused errors" time="0.000183832">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle authentication errors" time="0.000231791">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle rate limit errors" time="0.000789556">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle server errors" time="0.00054444">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle unknown errors" time="0.000171743">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle non-Error objects" time="0.000158117">
        </testcase>
    </testsuite>
    <testsuite name="tests/main/llm/providers/OpenRouterProvider.test.ts" timestamp="2025-07-04T22:10:41.183Z" hostname="DESKTOP-HR2BSFJ" tests="46" failures="0" errors="0" skipped="0" time="0.028712222">
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Constructor &gt; should initialize with provided config" time="0.00183467">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should test connection successfully with valid API key" time="0.002904735">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should fail connection test without API key" time="0.001213533">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should handle HTTP errors during connection test" time="0.000255695">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should handle network errors during connection test" time="0.000362134">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should handle timeout during connection test" time="0.000236006">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should get available models successfully" time="0.000828687">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle models without description" time="0.000199607">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle error when API key is missing" time="0.001056242">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle HTTP error when getting models" time="0.000330393">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle network error when getting models" time="0.000208872">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should send message successfully" time="0.00126965">
            <system-out>
OpenRouter: Response received: {
  hasContent: [33mtrue[39m,
  hasToolCalls: [33mfalse[39m,
  toolCallsCount: [33m0[39m,
  toolCalls: [90mundefined[39m,
  finishReason: [32m&apos;stop&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should send message with custom options" time="0.000989068">
            <system-out>
OpenRouter: Response received: {
  hasContent: [33mtrue[39m,
  hasToolCalls: [33mfalse[39m,
  toolCallsCount: [33m0[39m,
  toolCalls: [90mundefined[39m,
  finishReason: [32m&apos;stop&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should send message with tools" time="0.001487464">
            <system-out>
OpenRouter: Sending tools: { count: [33m1[39m, toolNames: [ [32m&apos;get_weather&apos;[39m ] }

OpenRouter: Response received: {
  hasContent: [33mtrue[39m,
  hasToolCalls: [33mtrue[39m,
  toolCallsCount: [33m1[39m,
  toolCalls: [ { id: [32m&apos;call_123&apos;[39m, type: [32m&apos;function&apos;[39m, function: [36m[Object][39m } ],
  finishReason: [32m&apos;tool_calls&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle missing API key" time="0.000449338">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle HTTP error response" time="0.000533808">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle missing choices in response" time="0.000461481">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle response with empty content" time="0.001210869">
            <system-out>
OpenRouter: Response received: {
  hasContent: [33mfalse[39m,
  hasToolCalls: [33mfalse[39m,
  toolCallsCount: [33m0[39m,
  toolCalls: [90mundefined[39m,
  finishReason: [32m&apos;stop&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle network error" time="0.000503432">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should stream message successfully" time="0.001251329">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle streaming with custom options" time="0.00049179">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle missing API key during streaming" time="0.00061613">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle HTTP error during streaming" time="0.00073411">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle missing response body during streaming" time="0.000434423">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle invalid JSON in streaming response" time="0.000690665">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle incomplete streaming data" time="0.00036867">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should release reader lock even on error" time="0.000356323">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should get model info successfully" time="0.000340124">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should return null for non-existent model" time="0.000199828">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should handle missing API key" time="0.000484671">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should handle HTTP errors other than 404" time="0.000223783">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should handle network errors" time="0.000166244">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should get credit balance successfully" time="0.000815091">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should return null when no API key configured" time="0.000357549">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should return null on HTTP error" time="0.000157392">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should return null when credit_balance is missing" time="0.000108548">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should handle network errors" time="0.00013539">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Formatting &gt; should format regular messages correctly" time="0.00014384">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Formatting &gt; should format tool response messages correctly" time="0.000159926">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Formatting &gt; should format messages with tool calls correctly" time="0.0001959">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle insufficient credits error" time="0.000382425">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle rate limit error" time="0.000252168">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle model validation error" time="0.000173323">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle timeout errors" time="0.000170226">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle timeout message errors" time="0.00016945">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should fall back to base error handling" time="0.000387612">
        </testcase>
    </testsuite>
</testsuites>
