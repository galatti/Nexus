<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="358" failures="0" errors="0" time="0.854737363">
    <testsuite name="tests/integration/main-ipc.test.ts" timestamp="2025-07-05T01:05:10.254Z" hostname="DESKTOP-HR2BSFJ" tests="31" failures="0" errors="0" skipped="0" time="0.023467805">
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:get" time="0.001994823">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:update" time="0.000660719">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:reset" time="0.00042005">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:export" time="0.001416251">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:import" time="0.001464867">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle invalid JSON in settings:import" time="0.000914678">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:test-provider with healthy provider" time="0.000804022">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:test-provider with unhealthy provider" time="0.000487665">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:test-provider with missing provider" time="0.000506903">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:get-models successfully" time="0.001501261">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:get-models with error" time="0.000473861">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:send-message successfully" time="0.000348973">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:send-message with error" time="0.000276881">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:get-status successfully" time="0.000270483">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:add-server successfully" time="0.002419407">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:add-server with error" time="0.000707184">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:remove-server successfully" time="0.000445907">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:update-server successfully" time="0.00053431">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:get-servers successfully" time="0.000275772">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:get-pending" time="0.000300204">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:respond successfully" time="0.000377106">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:respond with failure" time="0.000196409">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:get-all" time="0.000282306">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:revoke successfully" time="0.000368892">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:clear-session" time="0.000363779">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:update-settings" time="0.000317847">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:get-settings" time="0.000316019">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Error Handling &gt; should handle unexpected errors in handlers" time="0.000774977">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Error Handling &gt; should handle non-Error objects thrown" time="0.000311306">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Cross-Module Integration &gt; should handle full workflow: add provider, test, and send message" time="0.000642877">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Cross-Module Integration &gt; should handle MCP server and permissions workflow" time="0.000773357">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/mcp-integration.test.ts" timestamp="2025-07-05T01:05:10.259Z" hostname="DESKTOP-HR2BSFJ" tests="7" failures="0" errors="0" skipped="0" time="0.041944966">
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Complete Server Lifecycle &gt; should handle complete server lifecycle from creation to destruction" time="0.012437218">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Executing tool test-tool on server integration-test-server { args: { testParam: [32m&apos;value&apos;[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Reading resource file://test.txt from server integration-test-server

Resource read completed for file://test.txt

Executing prompt test-prompt on server integration-test-server { args: { context: [32m&apos;test&apos;[39m } }

Prompt execution completed for test-prompt

Subscribed to resource file://test.txt on integration-test-server

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Complete Server Lifecycle &gt; should handle server failure and recovery" time="0.007443608">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

Stopping MCP server: Integration Test Server
Successfully stopped MCP server: Integration Test Server

Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Error Handling and Edge Cases &gt; should handle tool execution errors gracefully" time="0.004288212">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Executing tool test-tool on server integration-test-server { args: {} }

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Error Handling and Edge Cases &gt; should handle resource reading errors" time="0.004351258">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Reading resource file://nonexistent.txt from server integration-test-server

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Error Handling and Edge Cases &gt; should handle server process crashes" time="0.004326781">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Resource Subscription Management &gt; should handle resource subscription lifecycle" time="0.003277772">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Subscribed to resource file://dynamic-resource.txt on integration-test-server

Unsubscribed from resource file://dynamic-resource.txt on integration-test-server

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Performance and Concurrency &gt; should handle concurrent tool executions" time="0.004175526">
            <system-out>
Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

Successfully started MCP server: Integration Test Server

Executing tool test-tool on server integration-test-server { args: { index: [33m0[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Executing tool test-tool on server integration-test-server { args: { index: [33m1[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Executing tool test-tool on server integration-test-server { args: { index: [33m2[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Stopping MCP server: Integration Test Server

Successfully stopped MCP server: Integration Test Server

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/utils/SessionManager.test.ts" timestamp="2025-07-05T01:05:10.265Z" hostname="DESKTOP-HR2BSFJ" tests="4" failures="0" errors="0" skipped="0" time="0.004211468">
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; creates a new session and sets it as current" time="0.001768641">
            <system-out>
SessionManager: No app storage found, checking for legacy chat history...
SessionManager: No legacy data found, creating default storage
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751677509770_86ptfmqm1

            </system-out>
        </testcase>
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; renames an existing session" time="0.000396325">
            <system-out>
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751677509771_fdz8r6wh8
SessionManager: Updated session: session_1751677509771_fdz8r6wh8

            </system-out>
        </testcase>
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; prunes old sessions beyond max cap" time="0.001041416">
            <system-out>
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751677509771_8yhcv2syk
SessionManager: Created new session: session_1751677509771_uia8i1rf1
SessionManager: Created new session: session_1751677509771_p2j4isimj
SessionManager: Created new session: session_1751677509771_6os60garx
SessionManager: Created new session: session_1751677509771_kwik6i8tk
SessionManager: Created new session: session_1751677509772_ctn363g5w
SessionManager: Created new session: session_1751677509772_qngby6wxp
SessionManager: Created new session: session_1751677509772_2s251ura3
SessionManager: Created new session: session_1751677509772_jezkk4m2i
SessionManager: Created new session: session_1751677509772_07sipj16u
SessionManager: Deleted session: session_1751677509771_8yhcv2syk
SessionManager: Deleted session: session_1751677509771_uia8i1rf1
SessionManager: Deleted session: session_1751677509771_p2j4isimj
SessionManager: Deleted session: session_1751677509771_6os60garx
SessionManager: Deleted session: session_1751677509771_kwik6i8tk

            </system-out>
        </testcase>
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; clears all sessions" time="0.00033694">
            <system-out>
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751677509772_tbzetyusk
SessionManager: Created new session: session_1751677509772_xtuakvbqi
SessionManager: Created new session: session_1751677509772_b507ncjys
SessionManager: Cleared all sessions

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/config/ConfigManager.test.ts" timestamp="2025-07-05T01:05:10.267Z" hostname="DESKTOP-HR2BSFJ" tests="38" failures="0" errors="0" skipped="0" time="0.020087892">
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should initialize with default settings when no config file exists" time="0.002812689">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should load existing configuration when config file exists" time="0.000523027">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should handle config file read errors gracefully" time="0.000311903">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should handle invalid JSON gracefully" time="0.000247595">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should use fallback path when userData path fails" time="0.000865233">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should update general settings" time="0.00040488">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should update LLM providers" time="0.000421968">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should update MCP servers" time="0.000438999">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should handle update errors" time="0.001013753">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should return deep copy of settings" time="0.000995136">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should add LLM provider" time="0.000451692">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should update LLM provider by ID" time="0.00030572">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should remove LLM provider" time="0.000376934">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should clear default provider when removing it" time="0.000316941">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should find best default provider model" time="0.000191703">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should return undefined when no enabled provider with model exists" time="0.000149606">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should set and get default provider model" time="0.00022759">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should add MCP server" time="0.000352824">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should update existing MCP server when adding with same ID" time="0.00019509">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should remove MCP server" time="0.000194679">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should handle removing non-existent MCP server" time="0.000116174">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should update MCP server" time="0.000244151">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should throw error when updating non-existent MCP server" time="0.000231545">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should validate valid settings" time="0.000290083">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject invalid theme" time="0.000192075">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject invalid provider type" time="0.000148231">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject invalid MCP server structure" time="0.000168551">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject non-object settings" time="0.000240927">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should export settings as JSON string" time="0.000474576">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should import valid settings" time="0.000364619">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should reject invalid JSON during import" time="0.000253081">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should reject invalid settings during import" time="0.000375234">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Deduplication &gt; should deduplicate providers by type" time="0.000498071">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Deduplication &gt; should ensure required default providers exist" time="0.000369557">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Reset to Defaults &gt; should reset all settings to defaults" time="0.000819847">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Migration and Merging &gt; should merge partial user settings with defaults" time="0.001050384">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Migration and Merging &gt; should handle migration of LLM settings" time="0.000723359">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Migration and Merging &gt; should use defaults when LLM providers are invalid" time="0.000399423">
        </testcase>
    </testsuite>
    <testsuite name="tests/main/llm/LlmManager.test.ts" timestamp="2025-07-05T01:05:10.273Z" hostname="DESKTOP-HR2BSFJ" tests="49" failures="0" errors="0" skipped="0" time="0.036841009">
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Initialization &gt; should initialize successfully" time="0.002802254">
            <system-out>
Initializing LLM Manager
LLM Manager initialized successfully

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Initialization &gt; should set max listeners to 50" time="0.000443571">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should add Ollama provider" time="0.000977124">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should add OpenRouter provider" time="0.000657715">
            <system-out>
LLM provider added: Test Provider (openrouter)

Health check for test-provider: unhealthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should reject unsupported provider type" time="0.001356725">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should remove provider" time="0.001232665">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider removed: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should handle removing non-existent provider" time="0.00028804">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should update provider config" time="0.001824818">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should throw error when updating non-existent provider" time="0.000467567">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should check health when provider is enabled" time="0.000504082">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should mark as unhealthy when provider is disabled" time="0.000463293">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should get all providers" time="0.000271697">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should emit events for provider operations" time="0.00077852">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

LLM provider removed: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should check provider health" time="0.000231817">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should return false for non-existent provider health check" time="0.000253858">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should handle health check failures" time="0.000226782">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should implement exponential backoff for retries" time="0.000208483">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: unhealthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should reset retry count on successful health check" time="0.000465747">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: unhealthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should check all providers health" time="0.000536163">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider added: Test Provider (openrouter)

Health check for openrouter-provider: healthy

Health check for test-provider: healthy
Health check for openrouter-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should skip health check for disabled providers" time="0.000222067">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should skip health check if retry time not reached" time="0.000474421">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should get all provider health" time="0.000317875">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should emit health change events" time="0.000612234">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should send message successfully" time="0.001473723">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should merge provider config with options" time="0.000774184">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should throw error for non-existent provider" time="0.000373358">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should throw error for disabled provider" time="0.00038173">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should attempt recovery for unhealthy provider" time="0.000345999">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should throw error if recovery fails" time="0.000893234">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: unhealthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should handle message processing errors" time="0.000573831">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should emit events for message processing" time="0.001455605">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should reset retry count on successful message" time="0.000599333">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Model Management &gt; should get available models" time="0.000922925">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Model Management &gt; should return empty array for non-existent provider" time="0.000411659">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Model Management &gt; should handle model fetching errors" time="0.000417439">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should get status with enabled providers" time="0.001129799">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

[LlmManager] getStatus: Gathering status for providers...
  → Provider test-provider: name=&quot;Test Provider&quot; type=ollama enabled=true
[LlmManager] getStatus: Processing enabled provider test-provider

    • test-provider health=true models=1
[LlmManager] getStatus: Returning 1 enabled providers

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should exclude disabled providers from status" time="0.000650936">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

[LlmManager] getStatus: Gathering status for providers...
  → Provider test-provider: name=&quot;Test Provider&quot; type=ollama enabled=false
[LlmManager] getStatus: Returning 0 enabled providers

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - valid case" time="0.000451211">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - removed provider" time="0.000459188">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - disabled provider" time="0.000454767">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - unhealthy provider" time="0.000340595">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Shutdown &gt; should shutdown cleanly" time="0.001076538">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Shutting down LLM Manager
LLM Manager shutdown complete

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Shutdown &gt; should remove all listeners on shutdown" time="0.000446832">
            <system-out>
Shutting down LLM Manager
LLM Manager shutdown complete

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider ID Generation &gt; should use provided ID" time="0.000482158">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for custom-id: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider ID Generation &gt; should generate ID from type and name when not provided" time="0.000431074">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for ollama-test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider ID Generation &gt; should handle names with spaces and special characters" time="0.000295269">
            <system-out>
LLM provider added: Test Provider With Spaces (ollama)

Health check for ollama-test-provider-with-spaces: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Edge Cases &gt; should handle multiple providers of same type" time="0.000451959">
            <system-out>
LLM provider added: Ollama 1 (ollama)

Health check for ollama-1: healthy

LLM provider added: Ollama 2 (ollama)

Health check for ollama-2: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Edge Cases &gt; should handle provider config updates with undefined values" time="0.002868054">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Edge Cases &gt; should handle health check with no initial health status" time="0.000387896">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/mcp/ConnectionManager.test.ts" timestamp="2025-07-05T01:05:10.293Z" hostname="DESKTOP-HR2BSFJ" tests="57" failures="0" errors="0" skipped="0" time="0.177566718">
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should successfully start a STDIO server" time="0.009333708">
            <system-out>
Starting MCP server: Test Server (test-server)

MCP server ready: Test Server {
  tools: [ { name: [32m&apos;test-tool&apos;[39m, description: [32m&apos;Test tool&apos;[39m, inputSchema: {} } ]
}

Discovered tools for test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

Successfully started MCP server: Test Server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should successfully start an HTTP server" time="0.00273393">
            <system-out>
Starting MCP server: Test HTTP Server (test-http-server)

MCP server ready: Test HTTP Server { tools: [] }

Discovered tools for test-http-server: [33m0[39m []

Discovered resources for test-http-server: [33m0[39m

Discovered prompts for test-http-server: [33m0[39m

Successfully started MCP server: Test HTTP Server

Stopping MCP server: Test HTTP Server

Successfully stopped MCP server: Test HTTP Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle Windows command resolution" time="0.009393448">
            <system-out>
Starting MCP server: Test Server (test-server)

MCP server ready: Test Server { tools: [] }

Discovered tools for test-server: [33m0[39m []

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

Successfully started MCP server: Test Server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle command with spaces and quotes" time="0.004915483">
            <system-out>
Starting MCP server: Test Server (test-server)

MCP server ready: Test Server { tools: [] }

Discovered tools for test-server: [33m0[39m []

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

Successfully started MCP server: Test Server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle maximum server limit" time="0.005118235">
            <system-out>
Stopping MCP server: Server 0
Stopping MCP server: Server 1
Stopping MCP server: Server 2
Stopping MCP server: Server 3
Stopping MCP server: Server 4
Stopping MCP server: Server 5
Stopping MCP server: Server 6
Stopping MCP server: Server 7

Successfully stopped MCP server: Server 0

Successfully stopped MCP server: Server 1

Successfully stopped MCP server: Server 2

Successfully stopped MCP server: Server 3

Successfully stopped MCP server: Server 4

Successfully stopped MCP server: Server 5

Successfully stopped MCP server: Server 6

Successfully stopped MCP server: Server 7

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle server already running" time="0.003013564">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle MCP SDK loading failure" time="0.001511949">
            <system-out>
Starting MCP server: Test Server (test-server)

Stopping MCP server: Test Server
Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle client connection failure" time="0.00182793">
            <system-out>
Starting MCP server: Test Server (test-server)

Stopping MCP server: Test Server
Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle missing command for STDIO transport" time="0.002046896">
            <system-out>
Starting MCP server: Test Server (test-server)

Stopping MCP server: Test Server
Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should set up environment variables correctly" time="0.00290527">
            <system-out>
Starting MCP server: Test Server (test-server)

MCP server ready: Test Server { tools: [] }

Discovered tools for test-server: [33m0[39m []

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

Successfully started MCP server: Test Server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should successfully stop a running server" time="0.003080214">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should handle stopping non-existent server gracefully" time="0.000905881">
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should handle client close failure" time="0.002572922">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should kill process if client close fails" time="0.003051918">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopAllServers &gt; should stop all running servers" time="0.002934929">
            <system-out>
Stopping MCP server: Test Server
Stopping MCP server: Test Server
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should execute a tool with permission" time="0.004098991">
            <system-out>
Executing tool test-tool on server test-server { args: { arg1: [32m&apos;value1&apos;[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;success&apos;[39m } }

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when server not found" time="0.002974339">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when server not ready" time="0.002879163">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when tool not found" time="0.003646397">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when permission denied" time="0.003765646">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should handle tool execution errors" time="0.00267272">
            <system-out>
Executing tool test-tool on server test-server { args: {} }

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAvailableTools &gt; should return tools for a specific server" time="0.002794908">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAvailableTools &gt; should return empty array for non-existent server" time="0.005229451">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAvailableTools &gt; should return empty array for server without tools" time="0.002373936">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAllAvailableTools &gt; should return tools from all servers" time="0.003506882">
            <system-out>
Stopping MCP server: Test Server
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should read a resource successfully" time="0.00313133">
            <system-out>
Reading resource file://test.txt from server test-server

Resource read completed for file://test.txt

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should reject when server not found" time="0.002961355">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should reject when server not ready" time="0.004205027">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should handle read errors" time="0.003410785">
            <system-out>
Reading resource file://test.txt from server test-server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; subscribeToResource &gt; should subscribe to a resource successfully" time="0.003099199">
            <system-out>
Subscribed to resource file://test.txt on test-server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; subscribeToResource &gt; should handle already subscribed resources" time="0.002368573">
            <system-out>
Already subscribed to resource file://test.txt on test-server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; subscribeToResource &gt; should handle subscription errors" time="0.002813318">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; unsubscribeFromResource &gt; should unsubscribe from a resource successfully" time="0.003815664">
            <system-out>
Unsubscribed from resource file://test.txt on test-server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; unsubscribeFromResource &gt; should handle not subscribed resources" time="0.00261093">
            <system-out>
Unsubscribed from resource file://test.txt on test-server

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; getAvailableResources &gt; should return resources for a specific server" time="0.002353566">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; getAvailableResources &gt; should return empty array for non-existent server" time="0.002810161">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; getAllAvailableResources &gt; should return resources from all servers" time="0.004247362">
            <system-out>
Stopping MCP server: Test Server
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should execute a prompt successfully" time="0.003637355">
            <system-out>
Executing prompt test-prompt on server test-server { args: { arg1: [32m&apos;value1&apos;[39m } }

Prompt execution completed for test-prompt

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should execute prompt without arguments" time="0.002427406">
            <system-out>
Executing prompt test-prompt on server test-server { args: [90mundefined[39m }

Prompt execution completed for test-prompt

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should reject when server not found" time="0.004498882">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should reject when prompt not found" time="0.002131557">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should handle prompt execution errors" time="0.00261943">
            <system-out>
Executing prompt test-prompt on server test-server { args: [90mundefined[39m }

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; getAvailablePrompts &gt; should return prompts for a specific server" time="0.002425562">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; getAvailablePrompts &gt; should return empty array for non-existent server" time="0.002238071">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; getAllAvailablePrompts &gt; should return prompts from all servers" time="0.003997218">
            <system-out>
Stopping MCP server: Test Server
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; State Management &gt; should get server state" time="0.00319558">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; State Management &gt; should return null for non-existent server state" time="0.000775765">
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; State Management &gt; should get all server states" time="0.003461524">
            <system-out>
Stopping MCP server: Test Server
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; sampleLLM &gt; should handle LLM sampling requests" time="0.003176033">
            <system-out>
Warning: sampleLLM called directly - this should go through normal tool execution

Executing tool sampleLLM on server test-server {
  args: {
    messages: [ [36m[Object][39m ],
    maxTokens: [33m100[39m,
    temperature: [33m0.7[39m,
    stopSequences: [90mundefined[39m,
    modelPreferences: [90mundefined[39m
  }
}

Tool execution completed for sampleLLM { result: { content: [32m&apos;LLM response&apos;[39m } }

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; sampleLLM &gt; should reject when server not found" time="0.001473063">
            <system-out>
Warning: sampleLLM called directly - this should go through normal tool execution

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; sampleLLM &gt; should handle sampling errors gracefully" time="0.003160374">
            <system-out>
Warning: sampleLLM called directly - this should go through normal tool execution

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should discover tools correctly" time="0.001083688">
            <system-out>
Discovered tools for test-server: [33m2[39m [ [32m&apos;tool1&apos;[39m, [32m&apos;tool2&apos;[39m ]

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should discover resources correctly" time="0.000903503">
            <system-out>
Discovered resources for test-server: [33m2[39m

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should discover prompts correctly" time="0.000783067">
            <system-out>
Discovered prompts for test-server: [33m2[39m

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should handle discovery errors gracefully" time="0.000660075">
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Resource Refresh &gt; should refresh server resources" time="0.002575773">
            <system-out>
Discovered resources for test-server: [33m1[39m

Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Resource Refresh &gt; should handle refresh errors gracefully" time="0.002072082">
            <system-out>
Stopping MCP server: Test Server

Successfully stopped MCP server: Test Server

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/permissions/PermissionManager.test.ts" timestamp="2025-07-05T01:05:10.316Z" hostname="DESKTOP-HR2BSFJ" tests="18" failures="0" errors="0" skipped="0" time="0.01360052">
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Initialization &gt; should initialize with default settings" time="0.00276707">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Initialization &gt; should set max listeners to 50" time="0.00080199">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Auto-Approval &gt; should auto-approve for trusted servers" time="0.000937938">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Auto-Approval &gt; should auto-approve based on risk level settings" time="0.000574721">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should revoke permissions" time="0.00110806">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should handle revoking non-existent permissions" time="0.00048701">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should clear all permissions" time="0.000377394">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should update settings" time="0.000376448">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should manage trusted servers" time="0.001218388">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Session Management &gt; should clear session permissions" time="0.000413107">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Approval Request Handling &gt; should timeout approval requests" time="0.000941045">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Approval Request Handling &gt; should handle invalid approval responses" time="0.000490193">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Approval Request Handling &gt; should emit permission request events" time="0.000549278">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Shutdown &gt; should clean up all resources on shutdown" time="0.000262646">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle empty permission key generation" time="0.000172259">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle session key generation with various inputs" time="0.000136736">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle argument hashing with special characters" time="0.000240078">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle argument hashing with undefined/null values" time="0.000180582">
        </testcase>
    </testsuite>
    <testsuite name="tests/main/security/SecureStorage.test.ts" timestamp="2025-07-05T01:05:10.318Z" hostname="DESKTOP-HR2BSFJ" tests="22" failures="0" errors="0" skipped="0" time="0.007871415">
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Initialization &gt; should create singleton instance" time="0.000715415">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Initialization &gt; should check encryption availability" time="0.000356764">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Initialization &gt; should handle encryption not available" time="0.00011313">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should encrypt string successfully" time="0.000722744">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should decrypt string successfully" time="0.000584398">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should return plain text when encryption is not available" time="0.000148032">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should return plain text when decrypting non-encrypted data" time="0.000067678">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should handle encryption errors gracefully" time="0.000235141">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should handle decryption errors gracefully" time="0.000398262">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should migrate plain text to encrypted format" time="0.000424458">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should return original value if already encrypted" time="0.000229363">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should get plain text value from encrypted storage" time="0.000222268">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should return plain text value as-is" time="0.00021581">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should return empty string for empty input" time="0.00022253">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should detect encrypted values correctly" time="0.000162555">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should validate encryption successfully" time="0.000285611">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should fail validation when encryption is not available" time="0.000212494">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should fail validation on encryption error" time="0.000248804">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should fail validation on data mismatch" time="0.000369934">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Edge Cases &gt; should handle empty strings in getPlainTextValue" time="0.00012535">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Edge Cases &gt; should handle decryption failure gracefully in getPlainTextValue" time="0.000081587">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Edge Cases &gt; should return plain text on failed encryption during migration" time="0.000155189">
        </testcase>
    </testsuite>
    <testsuite name="tests/renderer/components/SessionSidebar.test.tsx" timestamp="2025-07-05T01:05:10.323Z" hostname="DESKTOP-HR2BSFJ" tests="1" failures="0" errors="0" skipped="0" time="0.024517249">
        <testcase classname="tests/renderer/components/SessionSidebar.test.tsx" name="SessionSidebar &gt; creates a new chat when clicking + New Chat" time="0.02394066">
            <system-out>
SessionManager: No app storage found, checking for legacy chat history...
SessionManager: No legacy data found, creating default storage
SessionContext: Loading initial session data...
SessionContext: Loaded [33m0[39m sessions, current: [90mundefined[39m
SessionContext: Creating new session with options: {}
SessionManager: Created new session: session_1751677509977_qob9tzsdq
SessionContext: Created and switched to new session: session_1751677509977_qob9tzsdq

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/llm/providers/OllamaProvider.test.ts" timestamp="2025-07-05T01:05:10.323Z" hostname="DESKTOP-HR2BSFJ" tests="45" failures="0" errors="0" skipped="0" time="0.022026162">
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Constructor &gt; should initialize with provided config" time="0.00186824">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Constructor &gt; should use default URL when none provided" time="0.000234225">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should test connection successfully" time="0.00181173">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle connection refused error" time="0.000439669">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle connection error with cause" time="0.000368794">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle HTTP errors" time="0.00020134">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle timeout errors" time="0.000284384">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should get available models successfully" time="0.000910232">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle empty model list" time="0.00046098">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle missing models property" time="0.000264165">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle connection error when getting models" time="0.000892891">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle HTTP error when getting models" time="0.000364666">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should format sizes correctly" time="0.000203105">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should send message successfully" time="0.000740407">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should send message with custom options" time="0.000343533">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should send message with tools" time="0.000325547">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should handle HTTP error when sending message" time="0.000187363">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should handle network error when sending message" time="0.000208248">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should handle finish reason based on done status" time="0.000139566">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should stream message successfully" time="0.000486433">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle streaming with custom options" time="0.000606887">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle HTTP error when streaming" time="0.000431395">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle missing response body when streaming" time="0.000452289">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle invalid JSON in streaming response" time="0.000513554">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle incomplete streaming data" time="0.000787217">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should release reader lock even on error" time="0.000584517">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should download model successfully" time="0.000830218">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should download model without progress callback" time="0.000548771">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should handle HTTP error when downloading" time="0.000480088">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should handle missing response body when downloading" time="0.000362407">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should handle invalid JSON in download response" time="0.000491662">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should release reader lock even on download error" time="0.000401185">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Deletion &gt; should delete model successfully" time="0.000528106">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Deletion &gt; should handle HTTP error when deleting model" time="0.000269018">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Deletion &gt; should handle network error when deleting model" time="0.000319235">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Formatting &gt; should format regular messages correctly" time="0.000175472">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Formatting &gt; should format tool response messages correctly" time="0.000181311">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Formatting &gt; should format messages with tool calls correctly" time="0.000145669">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle timeout errors properly" time="0.000094201">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle connection refused errors" time="0.000184158">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle authentication errors" time="0.000181751">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle rate limit errors" time="0.00019708">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle server errors" time="0.000150308">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle unknown errors" time="0.000107472">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle non-Error objects" time="0.000113786">
        </testcase>
    </testsuite>
    <testsuite name="tests/main/llm/providers/OpenRouterProvider.test.ts" timestamp="2025-07-05T01:05:10.329Z" hostname="DESKTOP-HR2BSFJ" tests="46" failures="0" errors="0" skipped="0" time="0.032923343">
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Constructor &gt; should initialize with provided config" time="0.00190973">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should test connection successfully with valid API key" time="0.003409429">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should fail connection test without API key" time="0.00131892">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should handle HTTP errors during connection test" time="0.000276776">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should handle network errors during connection test" time="0.000450641">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should handle timeout during connection test" time="0.000388228">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should get available models successfully" time="0.001177797">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle models without description" time="0.000426326">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle error when API key is missing" time="0.00229411">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle HTTP error when getting models" time="0.000380994">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle network error when getting models" time="0.000409588">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should send message successfully" time="0.001335471">
            <system-out>
OpenRouter: Response received: {
  hasContent: [33mtrue[39m,
  hasToolCalls: [33mfalse[39m,
  toolCallsCount: [33m0[39m,
  toolCalls: [90mundefined[39m,
  finishReason: [32m&apos;stop&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should send message with custom options" time="0.000939516">
            <system-out>
OpenRouter: Response received: {
  hasContent: [33mtrue[39m,
  hasToolCalls: [33mfalse[39m,
  toolCallsCount: [33m0[39m,
  toolCalls: [90mundefined[39m,
  finishReason: [32m&apos;stop&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should send message with tools" time="0.001258137">
            <system-out>
OpenRouter: Sending tools: { count: [33m1[39m, toolNames: [ [32m&apos;get_weather&apos;[39m ] }

OpenRouter: Response received: {
  hasContent: [33mtrue[39m,
  hasToolCalls: [33mtrue[39m,
  toolCallsCount: [33m1[39m,
  toolCalls: [ { id: [32m&apos;call_123&apos;[39m, type: [32m&apos;function&apos;[39m, function: [36m[Object][39m } ],
  finishReason: [32m&apos;tool_calls&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle missing API key" time="0.00032795">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle HTTP error response" time="0.000263262">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle missing choices in response" time="0.000389612">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle response with empty content" time="0.000434311">
            <system-out>
OpenRouter: Response received: {
  hasContent: [33mfalse[39m,
  hasToolCalls: [33mfalse[39m,
  toolCallsCount: [33m0[39m,
  toolCalls: [90mundefined[39m,
  finishReason: [32m&apos;stop&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle network error" time="0.0003166">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should stream message successfully" time="0.001168605">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle streaming with custom options" time="0.0008011">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle missing API key during streaming" time="0.000972769">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle HTTP error during streaming" time="0.0006879">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle missing response body during streaming" time="0.000377503">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle invalid JSON in streaming response" time="0.000964561">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle incomplete streaming data" time="0.000637031">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should release reader lock even on error" time="0.000600103">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should get model info successfully" time="0.000671979">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should return null for non-existent model" time="0.000261576">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should handle missing API key" time="0.000528191">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should handle HTTP errors other than 404" time="0.000236406">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should handle network errors" time="0.000184316">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should get credit balance successfully" time="0.000670858">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should return null when no API key configured" time="0.000523839">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should return null on HTTP error" time="0.000237191">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should return null when credit_balance is missing" time="0.000234862">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should handle network errors" time="0.000280138">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Formatting &gt; should format regular messages correctly" time="0.000293059">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Formatting &gt; should format tool response messages correctly" time="0.000279986">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Formatting &gt; should format messages with tool calls correctly" time="0.000866755">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle insufficient credits error" time="0.000245037">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle rate limit error" time="0.000168153">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle model validation error" time="0.000171832">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle timeout errors" time="0.000156459">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle timeout message errors" time="0.000142019">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should fall back to base error handling" time="0.000203292">
        </testcase>
    </testsuite>
    <testsuite name="tests/renderer/components/MCP/McpIntegration.test.tsx" timestamp="2025-07-05T01:05:10.337Z" hostname="DESKTOP-HR2BSFJ" tests="27" failures="0" errors="0" skipped="0" time="0.282538298">
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; renders without crashing" time="0.025122456">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; shows loading state initially" time="0.003053786">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; loads and displays servers successfully" time="0.012528743">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; displays empty state when no servers configured" time="0.030928717">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; displays error state when loading fails" time="0.006534208">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; handles network errors during loading" time="0.00473902">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Display and Status &gt; displays server status badges correctly" time="0.007867481">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Display and Status &gt; displays transport information correctly" time="0.008097387">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Display and Status &gt; displays status icons correctly" time="0.006829655">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; toggles server enabled state successfully" time="0.012201323">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; handles server toggle errors" time="0.011082683">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; removes server with confirmation" time="0.012097528">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; cancels server removal when user declines confirmation" time="0.008344326">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; handles server removal errors" time="0.011297241">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Wizard Integration &gt; opens server wizard when add server button is clicked" time="0.014254544">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Wizard Integration &gt; opens wizard from empty state" time="0.015228065">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Wizard Integration &gt; refreshes server list when server is added via wizard" time="0.015221672">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; handles undefined server data gracefully" time="0.003074438">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; handles malformed server data" time="0.002140324">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; retries loading on initial failure with user action" time="0.004403876">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; handles rapid server state changes" time="0.017085796">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; has proper ARIA labels and roles" time="0.010127133">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; supports keyboard navigation" time="0.007506705">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; provides clear loading states" time="0.010987573">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; provides clear error messages" time="0.00785105">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Integration with Settings &gt; calls onSettingsUpdate when servers change" time="0.008228247">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Integration with Settings &gt; reloads servers when settings prop changes" time="0.00393897">
        </testcase>
    </testsuite>
    <testsuite name="tests/renderer/components/MCP/McpServerWizard.test.tsx" timestamp="2025-07-05T01:05:10.340Z" hostname="DESKTOP-HR2BSFJ" tests="13" failures="0" errors="0" skipped="0" time="0.167140518">
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Basic Rendering &gt; renders without crashing when open" time="0.030665066">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Basic Rendering &gt; does not render when closed" time="0.001809546">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Basic Rendering &gt; displays wizard steps" time="0.008351418">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Form Validation &gt; validates server name is required" time="0.039709985">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Form Validation &gt; validates command for STDIO transport" time="0.03460476">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Connection Testing &gt; tests connection successfully" time="0.00760774">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Connection Testing &gt; handles connection test failure" time="0.006953453">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Server Creation &gt; creates server successfully" time="0.007664694">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Server Creation &gt; handles server creation error" time="0.007283228">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; User Interactions &gt; closes when close button is clicked" time="0.005640498">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; User Interactions &gt; calls onServerAdded when server is created" time="0.006179883">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Accessibility &gt; has proper ARIA labels" time="0.004192897">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Accessibility &gt; supports keyboard navigation" time="0.005016762">
        </testcase>
    </testsuite>
</testsuites>
