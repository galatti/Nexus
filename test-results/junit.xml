<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="358" failures="0" errors="0" time="2.084826514">
    <testsuite name="tests/integration/main-ipc.test.ts" timestamp="2025-07-05T04:03:14.781Z" hostname="DESKTOP-HR2BSFJ" tests="31" failures="0" errors="0" skipped="0" time="0.040820075">
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:get" time="0.002955337">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:update" time="0.000598145">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:reset" time="0.000370547">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:export" time="0.001090089">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle settings:import" time="0.005985322">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Settings IPC Handlers &gt; should handle invalid JSON in settings:import" time="0.002667333">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:test-provider with healthy provider" time="0.001813442">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:test-provider with unhealthy provider" time="0.000532566">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:test-provider with missing provider" time="0.001135747">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:get-models successfully" time="0.001167768">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:get-models with error" time="0.000850601">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:send-message successfully" time="0.000659257">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:send-message with error" time="0.000529976">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; LLM Provider IPC Handlers &gt; should handle llm:get-status successfully" time="0.00079906">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:add-server successfully" time="0.003195927">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:add-server with error" time="0.000654883">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:remove-server successfully" time="0.001511167">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:update-server successfully" time="0.00140002">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; MCP Server IPC Handlers &gt; should handle mcp:get-servers successfully" time="0.000525221">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:get-pending" time="0.000491359">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:respond successfully" time="0.001307942">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:respond with failure" time="0.000690336">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:get-all" time="0.000484223">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:revoke successfully" time="0.000726369">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:clear-session" time="0.000643125">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:update-settings" time="0.000540438">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Permission IPC Handlers &gt; should handle permissions:get-settings" time="0.000400421">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Error Handling &gt; should handle unexpected errors in handlers" time="0.000755715">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Error Handling &gt; should handle non-Error objects thrown" time="0.000429252">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Cross-Module Integration &gt; should handle full workflow: add provider, test, and send message" time="0.000980385">
        </testcase>
        <testcase classname="tests/integration/main-ipc.test.ts" name="Main Process IPC Integration Tests &gt; Cross-Module Integration &gt; should handle MCP server and permissions workflow" time="0.002088481">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/mcp-integration.test.ts" timestamp="2025-07-05T04:03:14.793Z" hostname="DESKTOP-HR2BSFJ" tests="7" failures="0" errors="0" skipped="0" time="0.072512163">
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Complete Server Lifecycle &gt; should handle complete server lifecycle from creation to destruction" time="0.033742321">
            <system-out>
🔍 Race condition check for startServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🚀 Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

✅ Successfully started MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

Executing tool test-tool on server integration-test-server { args: { testParam: [32m&apos;value&apos;[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Reading resource file://test.txt from server integration-test-server

Resource read completed for file://test.txt

Executing prompt test-prompt on server integration-test-server { args: { context: [32m&apos;test&apos;[39m } }

Prompt execution completed for test-prompt

Subscribed to resource file://test.txt on integration-test-server

🔍 Race condition check for stopServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🛑 Stopping MCP server: Integration Test Server (integration-test-server)

✅ Successfully stopped MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Complete Server Lifecycle &gt; should handle server failure and recovery" time="0.011130421">
            <system-out>
🔍 Race condition check for startServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🚀 Starting MCP server: Integration Test Server (integration-test-server)

🔓 Released operation lock for server integration-test-server

🔍 Race condition check for stopServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;failed&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🛑 Stopping MCP server: Integration Test Server (integration-test-server)
✅ Successfully stopped MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

🔍 Race condition check for startServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🚀 Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

✅ Successfully started MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

🔍 Race condition check for stopServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🛑 Stopping MCP server: Integration Test Server (integration-test-server)

✅ Successfully stopped MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Error Handling and Edge Cases &gt; should handle tool execution errors gracefully" time="0.005143984">
            <system-out>
🔍 Race condition check for startServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🚀 Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

✅ Successfully started MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

Executing tool test-tool on server integration-test-server { args: {} }

🔍 Race condition check for stopServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🛑 Stopping MCP server: Integration Test Server (integration-test-server)

✅ Successfully stopped MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Error Handling and Edge Cases &gt; should handle resource reading errors" time="0.004123016">
            <system-out>
🔍 Race condition check for startServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🚀 Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

✅ Successfully started MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

Reading resource file://nonexistent.txt from server integration-test-server

🔍 Race condition check for stopServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🛑 Stopping MCP server: Integration Test Server (integration-test-server)

✅ Successfully stopped MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Error Handling and Edge Cases &gt; should handle server process crashes" time="0.004934819">
            <system-out>
🔍 Race condition check for startServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🚀 Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

✅ Successfully started MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

🔍 Race condition check for stopServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🛑 Stopping MCP server: Integration Test Server (integration-test-server)

✅ Successfully stopped MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Resource Subscription Management &gt; should handle resource subscription lifecycle" time="0.006789979">
            <system-out>
🔍 Race condition check for startServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🚀 Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

✅ Successfully started MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

Subscribed to resource file://dynamic-resource.txt on integration-test-server

Unsubscribed from resource file://dynamic-resource.txt on integration-test-server

🔍 Race condition check for stopServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🛑 Stopping MCP server: Integration Test Server (integration-test-server)

✅ Successfully stopped MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

            </system-out>
        </testcase>
        <testcase classname="tests/integration/mcp-integration.test.ts" name="MCP Integration Tests &gt; Performance and Concurrency &gt; should handle concurrent tool executions" time="0.004945044">
            <system-out>
🔍 Race condition check for startServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🚀 Starting MCP server: Integration Test Server (integration-test-server)

MCP server ready: Integration Test Server {
  tools: [
    {
      name: [32m&apos;test-tool&apos;[39m,
      description: [32m&apos;A test tool&apos;[39m,
      inputSchema: [36m[Object][39m
    }
  ]
}

Discovered tools for integration-test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for integration-test-server: [33m1[39m

Discovered prompts for integration-test-server: [33m1[39m

✅ Successfully started MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

Executing tool test-tool on server integration-test-server { args: { index: [33m0[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Executing tool test-tool on server integration-test-server { args: { index: [33m1[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

Executing tool test-tool on server integration-test-server { args: { index: [33m2[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;Tool executed successfully&apos;[39m } }

🔍 Race condition check for stopServer on integration-test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server integration-test-server

🛑 Stopping MCP server: Integration Test Server (integration-test-server)

✅ Successfully stopped MCP server: Integration Test Server
🔓 Released operation lock for server integration-test-server

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/utils/SessionManager.test.ts" timestamp="2025-07-05T04:03:14.812Z" hostname="DESKTOP-HR2BSFJ" tests="4" failures="0" errors="0" skipped="0" time="0.02310609">
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; creates a new session and sets it as current" time="0.013612312">
            <system-out>
SessionManager: No app storage found, checking for legacy chat history...
SessionManager: No legacy data found, creating default storage
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751688193458_wrjll8k78

            </system-out>
        </testcase>
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; renames an existing session" time="0.001392265">
            <system-out>
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751688193468_78jvt1eu9
SessionManager: Updated session: session_1751688193468_78jvt1eu9

            </system-out>
        </testcase>
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; prunes old sessions beyond max cap" time="0.00456067">
            <system-out>
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751688193470_5i9bebnd3
SessionManager: Created new session: session_1751688193471_66etcs3vi
SessionManager: Created new session: session_1751688193472_xfpqohkqi
SessionManager: Created new session: session_1751688193472_yh2jjqb4w
SessionManager: Created new session: session_1751688193472_zj7sg1342
SessionManager: Created new session: session_1751688193472_y10i8cluh
SessionManager: Created new session: session_1751688193472_ygdjhj7pm
SessionManager: Created new session: session_1751688193472_ko2ucwpkx
SessionManager: Created new session: session_1751688193472_buqn0nrp0
SessionManager: Created new session: session_1751688193472_ke4mrjrdk
SessionManager: Deleted session: session_1751688193470_5i9bebnd3
SessionManager: Deleted session: session_1751688193471_66etcs3vi
SessionManager: Deleted session: session_1751688193472_xfpqohkqi
SessionManager: Deleted session: session_1751688193472_yh2jjqb4w
SessionManager: Deleted session: session_1751688193472_zj7sg1342

            </system-out>
        </testcase>
        <testcase classname="tests/utils/SessionManager.test.ts" name="SessionManager basics &gt; clears all sessions" time="0.001005592">
            <system-out>
SessionManager: Cleared all sessions

SessionManager: Created new session: session_1751688193474_i2qiuryv3
SessionManager: Created new session: session_1751688193474_1067w4miu
SessionManager: Created new session: session_1751688193474_ufqqybudf
SessionManager: Cleared all sessions

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/config/ConfigManager.test.ts" timestamp="2025-07-05T04:03:14.816Z" hostname="DESKTOP-HR2BSFJ" tests="38" failures="0" errors="0" skipped="0" time="0.034839522">
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should initialize with default settings when no config file exists" time="0.006041057">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should load existing configuration when config file exists" time="0.00406388">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should handle config file read errors gracefully" time="0.001224755">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should handle invalid JSON gracefully" time="0.000648589">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Constructor and Initialization &gt; should use fallback path when userData path fails" time="0.002809814">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should update general settings" time="0.000759202">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should update LLM providers" time="0.000385649">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should update MCP servers" time="0.000425809">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should handle update errors" time="0.000970377">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Management &gt; should return deep copy of settings" time="0.001459429">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should add LLM provider" time="0.000883865">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should update LLM provider by ID" time="0.000375881">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should remove LLM provider" time="0.000477987">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should clear default provider when removing it" time="0.000348546">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should find best default provider model" time="0.000226476">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should return undefined when no enabled provider with model exists" time="0.000209219">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Management &gt; should set and get default provider model" time="0.00024279">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should add MCP server" time="0.000633652">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should update existing MCP server when adding with same ID" time="0.001030743">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should remove MCP server" time="0.001043408">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should handle removing non-existent MCP server" time="0.000572596">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should update MCP server" time="0.000453878">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; MCP Server Management &gt; should throw error when updating non-existent MCP server" time="0.000286835">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should validate valid settings" time="0.000458819">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject invalid theme" time="0.000228161">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject invalid provider type" time="0.000170475">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject invalid MCP server structure" time="0.000754596">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Settings Validation &gt; should reject non-object settings" time="0.0002322">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should export settings as JSON string" time="0.000616283">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should import valid settings" time="0.000513974">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should reject invalid JSON during import" time="0.000312647">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Import/Export &gt; should reject invalid settings during import" time="0.000320671">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Deduplication &gt; should deduplicate providers by type" time="0.000546531">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Provider Deduplication &gt; should ensure required default providers exist" time="0.000343487">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Reset to Defaults &gt; should reset all settings to defaults" time="0.000439286">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Migration and Merging &gt; should merge partial user settings with defaults" time="0.000480405">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Migration and Merging &gt; should handle migration of LLM settings" time="0.000624531">
        </testcase>
        <testcase classname="tests/main/config/ConfigManager.test.ts" name="ConfigManager &gt; Migration and Merging &gt; should use defaults when LLM providers are invalid" time="0.000483531">
        </testcase>
    </testsuite>
    <testsuite name="tests/main/llm/LlmManager.test.ts" timestamp="2025-07-05T04:03:14.830Z" hostname="DESKTOP-HR2BSFJ" tests="49" failures="0" errors="0" skipped="0" time="0.070293717">
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Initialization &gt; should initialize successfully" time="0.004530577">
            <system-out>
Initializing LLM Manager
LLM Manager initialized successfully

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Initialization &gt; should set max listeners to 50" time="0.000670235">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should add Ollama provider" time="0.002139636">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should add OpenRouter provider" time="0.000727676">
            <system-out>
LLM provider added: Test Provider (openrouter)

Health check for test-provider: unhealthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should reject unsupported provider type" time="0.001487023">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should remove provider" time="0.002257177">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider removed: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should handle removing non-existent provider" time="0.000380852">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should update provider config" time="0.003745502">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should throw error when updating non-existent provider" time="0.001817618">
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should check health when provider is enabled" time="0.000757836">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should mark as unhealthy when provider is disabled" time="0.000516883">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should get all providers" time="0.000250688">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider Management &gt; should emit events for provider operations" time="0.001430661">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

LLM provider removed: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should check provider health" time="0.000440584">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should return false for non-existent provider health check" time="0.000392599">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should handle health check failures" time="0.000622406">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should implement exponential backoff for retries" time="0.000421219">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: unhealthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should reset retry count on successful health check" time="0.000616948">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: unhealthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should check all providers health" time="0.000729406">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider added: Test Provider (openrouter)

Health check for openrouter-provider: healthy

Health check for test-provider: healthy
Health check for openrouter-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should skip health check for disabled providers" time="0.00045877">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should skip health check if retry time not reached" time="0.000403195">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should get all provider health" time="0.000390329">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Health Management &gt; should emit health change events" time="0.001291359">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should send message successfully" time="0.003377892">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should merge provider config with options" time="0.006044025">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should throw error for non-existent provider" time="0.001872521">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should throw error for disabled provider" time="0.000612878">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should attempt recovery for unhealthy provider" time="0.00066611">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should throw error if recovery fails" time="0.000743889">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Health check for test-provider: unhealthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should handle message processing errors" time="0.000946788">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should emit events for message processing" time="0.001782867">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Message Processing &gt; should reset retry count on successful message" time="0.000755288">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Model Management &gt; should get available models" time="0.001181099">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Model Management &gt; should return empty array for non-existent provider" time="0.000651865">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Model Management &gt; should handle model fetching errors" time="0.000643162">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should get status with enabled providers" time="0.0020205">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

[LlmManager] getStatus: Gathering status for providers...
  → Provider test-provider: name=&quot;Test Provider&quot; type=ollama enabled=true
[LlmManager] getStatus: Processing enabled provider test-provider

    • test-provider health=true models=1
[LlmManager] getStatus: Returning 1 enabled providers

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should exclude disabled providers from status" time="0.00083065">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

[LlmManager] getStatus: Gathering status for providers...
  → Provider test-provider: name=&quot;Test Provider&quot; type=ollama enabled=false
[LlmManager] getStatus: Returning 0 enabled providers

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - valid case" time="0.00090417">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - removed provider" time="0.000750743">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - disabled provider" time="0.003136697">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Status and Validation &gt; should validate provider model - unhealthy provider" time="0.000641506">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Shutdown &gt; should shutdown cleanly" time="0.001396947">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

Shutting down LLM Manager
LLM Manager shutdown complete

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Shutdown &gt; should remove all listeners on shutdown" time="0.000931421">
            <system-out>
Shutting down LLM Manager
LLM Manager shutdown complete

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider ID Generation &gt; should use provided ID" time="0.00044979">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for custom-id: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider ID Generation &gt; should generate ID from type and name when not provided" time="0.00048362">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for ollama-test-provider: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Provider ID Generation &gt; should handle names with spaces and special characters" time="0.000363759">
            <system-out>
LLM provider added: Test Provider With Spaces (ollama)

Health check for ollama-test-provider-with-spaces: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Edge Cases &gt; should handle multiple providers of same type" time="0.000468838">
            <system-out>
LLM provider added: Ollama 1 (ollama)

Health check for ollama-1: healthy

LLM provider added: Ollama 2 (ollama)

Health check for ollama-2: healthy

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Edge Cases &gt; should handle provider config updates with undefined values" time="0.005340107">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

LLM provider updated: test-provider

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/LlmManager.test.ts" name="LlmManager &gt; Edge Cases &gt; should handle health check with no initial health status" time="0.000793308">
            <system-out>
LLM provider added: Test Provider (ollama)

Health check for test-provider: healthy

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/mcp/ConnectionManager.test.ts" timestamp="2025-07-05T04:03:14.877Z" hostname="DESKTOP-HR2BSFJ" tests="57" failures="0" errors="0" skipped="0" time="0.383632859">
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should successfully start a STDIO server" time="0.014025914">
            <system-out>
🔍 Race condition check for startServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🚀 Starting MCP server: Test Server (test-server)

MCP server ready: Test Server {
  tools: [ { name: [32m&apos;test-tool&apos;[39m, description: [32m&apos;Test tool&apos;[39m, inputSchema: {} } ]
}

Discovered tools for test-server: [33m1[39m [ [32m&apos;test-tool&apos;[39m ]

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

✅ Successfully started MCP server: Test Server
🔓 Released operation lock for server test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should successfully start an HTTP server" time="0.005130143">
            <system-out>
🔍 Race condition check for startServer on test-http-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-http-server

🚀 Starting MCP server: Test HTTP Server (test-http-server)

MCP server ready: Test HTTP Server { tools: [] }

Discovered tools for test-http-server: [33m0[39m []

Discovered resources for test-http-server: [33m0[39m

Discovered prompts for test-http-server: [33m0[39m

✅ Successfully started MCP server: Test HTTP Server
🔓 Released operation lock for server test-http-server

🔍 Race condition check for stopServer on test-http-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-http-server

🛑 Stopping MCP server: Test HTTP Server (test-http-server)

✅ Successfully stopped MCP server: Test HTTP Server
🔓 Released operation lock for server test-http-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle Windows command resolution" time="0.005341971">
            <system-out>
🔍 Race condition check for startServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🚀 Starting MCP server: Test Server (test-server)

MCP server ready: Test Server { tools: [] }

Discovered tools for test-server: [33m0[39m []

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

✅ Successfully started MCP server: Test Server
🔓 Released operation lock for server test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle command with spaces and quotes" time="0.004851268">
            <system-out>
🔍 Race condition check for startServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🚀 Starting MCP server: Test Server (test-server)

MCP server ready: Test Server { tools: [] }

Discovered tools for test-server: [33m0[39m []

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

✅ Successfully started MCP server: Test Server
🔓 Released operation lock for server test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle maximum server limit" time="0.011093678">
            <system-out>
🔍 Race condition check for startServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m8[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🔓 Released operation lock for server test-server

🔍 Race condition check for stopServer on server-0: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m8[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server server-0
🔍 Race condition check for stopServer on server-1: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m8[39m,
  activeLocks: [33m1[39m
}
🔒 Acquired operation lock for server server-1
🔍 Race condition check for stopServer on server-2: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m8[39m,
  activeLocks: [33m2[39m
}
🔒 Acquired operation lock for server server-2
🔍 Race condition check for stopServer on server-3: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m8[39m,
  activeLocks: [33m3[39m
}
🔒 Acquired operation lock for server server-3
🔍 Race condition check for stopServer on server-4: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m8[39m,
  activeLocks: [33m4[39m
}
🔒 Acquired operation lock for server server-4
🔍 Race condition check for stopServer on server-5: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m8[39m,
  activeLocks: [33m5[39m
}
🔒 Acquired operation lock for server server-5
🔍 Race condition check for stopServer on server-6: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m8[39m,
  activeLocks: [33m6[39m
}
🔒 Acquired operation lock for server server-6
🔍 Race condition check for stopServer on server-7: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m8[39m,
  activeLocks: [33m7[39m
}
🔒 Acquired operation lock for server server-7
🛑 Stopping MCP server: Server 0 (server-0)
🛑 Stopping MCP server: Server 1 (server-1)
🛑 Stopping MCP server: Server 2 (server-2)
🛑 Stopping MCP server: Server 3 (server-3)
🛑 Stopping MCP server: Server 4 (server-4)
🛑 Stopping MCP server: Server 5 (server-5)
🛑 Stopping MCP server: Server 6 (server-6)
🛑 Stopping MCP server: Server 7 (server-7)

✅ Successfully stopped MCP server: Server 0
🔓 Released operation lock for server server-0

✅ Successfully stopped MCP server: Server 1
🔓 Released operation lock for server server-1

✅ Successfully stopped MCP server: Server 2
🔓 Released operation lock for server server-2

✅ Successfully stopped MCP server: Server 3
🔓 Released operation lock for server server-3

✅ Successfully stopped MCP server: Server 4
🔓 Released operation lock for server server-4

✅ Successfully stopped MCP server: Server 5
🔓 Released operation lock for server server-5

✅ Successfully stopped MCP server: Server 6
🔓 Released operation lock for server server-6

✅ Successfully stopped MCP server: Server 7
🔓 Released operation lock for server server-7

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle server already running" time="0.002865619">
            <system-out>
🔍 Race condition check for startServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🔓 Released operation lock for server test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle MCP SDK loading failure" time="0.004264184">
            <system-out>
🔍 Race condition check for startServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🚀 Starting MCP server: Test Server (test-server)

🔓 Released operation lock for server test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;failed&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)
✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle client connection failure" time="0.00289318">
            <system-out>
🔍 Race condition check for startServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🚀 Starting MCP server: Test Server (test-server)

🔓 Released operation lock for server test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;failed&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)
✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should handle missing command for STDIO transport" time="0.002674753">
            <system-out>
🔍 Race condition check for startServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🚀 Starting MCP server: Test Server (test-server)

🔓 Released operation lock for server test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;failed&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)
✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; startServer &gt; should set up environment variables correctly" time="0.005250712">
            <system-out>
🔍 Race condition check for startServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🚀 Starting MCP server: Test Server (test-server)

MCP server ready: Test Server { tools: [] }

Discovered tools for test-server: [33m0[39m []

Discovered resources for test-server: [33m0[39m

Discovered prompts for test-server: [33m0[39m

✅ Successfully started MCP server: Test Server
🔓 Released operation lock for server test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should successfully stop a running server" time="0.004082532">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should handle stopping non-existent server gracefully" time="0.003159539">
            <system-out>
🔍 Race condition check for stopServer on non-existent: {
  hasLock: [33mfalse[39m,
  serverExists: [33mfalse[39m,
  currentState: [1mnull[22m,
  totalServers: [33m0[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server non-existent

🔓 Released operation lock for server non-existent

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should handle client close failure" time="0.008429223">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopServer &gt; should kill process if client close fails" time="0.005051823">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Server Lifecycle Management &gt; stopAllServers &gt; should stop all running servers" time="0.004880946">
            <system-out>
🔍 Race condition check for stopServer on server1: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m3[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server server1
🔍 Race condition check for stopServer on server2: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m3[39m,
  activeLocks: [33m1[39m
}
🔒 Acquired operation lock for server server2
🔍 Race condition check for stopServer on server3: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m3[39m,
  activeLocks: [33m2[39m
}
🔒 Acquired operation lock for server server3
🛑 Stopping MCP server: Test Server (server1)
🛑 Stopping MCP server: Test Server (server2)
🛑 Stopping MCP server: Test Server (server3)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server server1

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server server2

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server server3

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should execute a tool with permission" time="0.008852394">
            <system-out>
Executing tool test-tool on server test-server { args: { arg1: [32m&apos;value1&apos;[39m } }

Tool execution completed for test-tool { result: { result: [32m&apos;success&apos;[39m } }

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when server not found" time="0.011468431">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when server not ready" time="0.005623688">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;starting&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when tool not found" time="0.00357034">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should reject when permission denied" time="0.004323177">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; executeTool &gt; should handle tool execution errors" time="0.005504797">
            <system-out>
Executing tool test-tool on server test-server { args: {} }

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAvailableTools &gt; should return tools for a specific server" time="0.003121003">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAvailableTools &gt; should return empty array for non-existent server" time="0.004269778">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAvailableTools &gt; should return empty array for server without tools" time="0.008519496">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Tool Management &gt; getAllAvailableTools &gt; should return tools from all servers" time="0.010412354">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m2[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server
🔍 Race condition check for stopServer on server2: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m2[39m,
  activeLocks: [33m1[39m
}
🔒 Acquired operation lock for server server2
🛑 Stopping MCP server: Test Server (test-server)
🛑 Stopping MCP server: Test Server (server2)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server server2

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should read a resource successfully" time="0.007762167">
            <system-out>
Reading resource file://test.txt from server test-server

Resource read completed for file://test.txt

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should reject when server not found" time="0.003970447">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should reject when server not ready" time="0.006885413">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;starting&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; readResource &gt; should handle read errors" time="0.009803762">
            <system-out>
Reading resource file://test.txt from server test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; subscribeToResource &gt; should subscribe to a resource successfully" time="0.004570686">
            <system-out>
Subscribed to resource file://test.txt on test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; subscribeToResource &gt; should handle already subscribed resources" time="0.008250239">
            <system-out>
Already subscribed to resource file://test.txt on test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; subscribeToResource &gt; should handle subscription errors" time="0.006189942">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; unsubscribeFromResource &gt; should unsubscribe from a resource successfully" time="0.004858039">
            <system-out>
Unsubscribed from resource file://test.txt on test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; unsubscribeFromResource &gt; should handle not subscribed resources" time="0.019700801">
            <system-out>
Unsubscribed from resource file://test.txt on test-server

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; getAvailableResources &gt; should return resources for a specific server" time="0.004460323">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; getAvailableResources &gt; should return empty array for non-existent server" time="0.004199694">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Resource Management &gt; getAllAvailableResources &gt; should return resources from all servers" time="0.004261563">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m2[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server
🔍 Race condition check for stopServer on server2: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m2[39m,
  activeLocks: [33m1[39m
}
🔒 Acquired operation lock for server server2
🛑 Stopping MCP server: Test Server (test-server)
🛑 Stopping MCP server: Test Server (server2)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server server2

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should execute a prompt successfully" time="0.005705311">
            <system-out>
Executing prompt test-prompt on server test-server { args: { arg1: [32m&apos;value1&apos;[39m } }

Prompt execution completed for test-prompt

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should execute prompt without arguments" time="0.007546297">
            <system-out>
Executing prompt test-prompt on server test-server { args: [90mundefined[39m }

Prompt execution completed for test-prompt

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should reject when server not found" time="0.005119892">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should reject when prompt not found" time="0.007543156">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; executePrompt &gt; should handle prompt execution errors" time="0.006888422">
            <system-out>
Executing prompt test-prompt on server test-server { args: [90mundefined[39m }

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; getAvailablePrompts &gt; should return prompts for a specific server" time="0.0055048">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; getAvailablePrompts &gt; should return empty array for non-existent server" time="0.008417271">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Prompt Management &gt; getAllAvailablePrompts &gt; should return prompts from all servers" time="0.013227037">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m2[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server
🔍 Race condition check for stopServer on server2: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m2[39m,
  activeLocks: [33m1[39m
}
🔒 Acquired operation lock for server server2
🛑 Stopping MCP server: Test Server (test-server)
🛑 Stopping MCP server: Test Server (server2)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server server2

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; State Management &gt; should get server state" time="0.020136061">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; State Management &gt; should return null for non-existent server state" time="0.005039054">
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; State Management &gt; should get all server states" time="0.004671742">
            <system-out>
🔍 Race condition check for stopServer on server1: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m2[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server server1
🔍 Race condition check for stopServer on server2: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;starting&apos;[39m,
  totalServers: [33m2[39m,
  activeLocks: [33m1[39m
}
🔒 Acquired operation lock for server server2
🛑 Stopping MCP server: Test Server (server1)
🛑 Stopping MCP server: Test Server (server2)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server server1

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server server2

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; sampleLLM &gt; should handle LLM sampling requests" time="0.019113788">
            <system-out>
Warning: sampleLLM called directly - this should go through normal tool execution

Executing tool sampleLLM on server test-server {
  args: {
    messages: [ [36m[Object][39m ],
    maxTokens: [33m100[39m,
    temperature: [33m0.7[39m,
    stopSequences: [90mundefined[39m,
    modelPreferences: [90mundefined[39m
  }
}

Tool execution completed for sampleLLM { result: { content: [32m&apos;LLM response&apos;[39m } }

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; sampleLLM &gt; should reject when server not found" time="0.002071959">
            <system-out>
Warning: sampleLLM called directly - this should go through normal tool execution

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; sampleLLM &gt; should handle sampling errors gracefully" time="0.009403278">
            <system-out>
Warning: sampleLLM called directly - this should go through normal tool execution

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should discover tools correctly" time="0.002203628">
            <system-out>
Discovered tools for test-server: [33m2[39m [ [32m&apos;tool1&apos;[39m, [32m&apos;tool2&apos;[39m ]

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should discover resources correctly" time="0.002066514">
            <system-out>
Discovered resources for test-server: [33m2[39m

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should discover prompts correctly" time="0.002293737">
            <system-out>
Discovered prompts for test-server: [33m2[39m

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Discovery Methods &gt; should handle discovery errors gracefully" time="0.005971848">
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Resource Refresh &gt; should refresh server resources" time="0.005882406">
            <system-out>
Discovered resources for test-server: [33m1[39m

🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
        <testcase classname="tests/main/mcp/ConnectionManager.test.ts" name="ServerManager &gt; Advanced Features &gt; Resource Refresh &gt; should handle refresh errors gracefully" time="0.004158257">
            <system-out>
🔍 Race condition check for stopServer on test-server: {
  hasLock: [33mfalse[39m,
  serverExists: [33mtrue[39m,
  currentState: [32m&apos;ready&apos;[39m,
  totalServers: [33m1[39m,
  activeLocks: [33m0[39m
}
🔒 Acquired operation lock for server test-server

🛑 Stopping MCP server: Test Server (test-server)

✅ Successfully stopped MCP server: Test Server
🔓 Released operation lock for server test-server

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/permissions/PermissionManager.test.ts" timestamp="2025-07-05T04:03:14.954Z" hostname="DESKTOP-HR2BSFJ" tests="18" failures="0" errors="0" skipped="0" time="0.027006732">
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Initialization &gt; should initialize with default settings" time="0.008740104">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Initialization &gt; should set max listeners to 50" time="0.002144606">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Auto-Approval &gt; should auto-approve for trusted servers" time="0.001035254">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Auto-Approval &gt; should auto-approve based on risk level settings" time="0.000454237">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should revoke permissions" time="0.001128978">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should handle revoking non-existent permissions" time="0.000475684">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should clear all permissions" time="0.000412677">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should update settings" time="0.000508561">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Permission Management API &gt; should manage trusted servers" time="0.001567583">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Session Management &gt; should clear session permissions" time="0.00063666">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Approval Request Handling &gt; should timeout approval requests" time="0.001503154">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Approval Request Handling &gt; should handle invalid approval responses" time="0.000633585">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Approval Request Handling &gt; should emit permission request events" time="0.000900214">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Shutdown &gt; should clean up all resources on shutdown" time="0.00045764">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle empty permission key generation" time="0.001469893">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle session key generation with various inputs" time="0.000587264">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle argument hashing with special characters" time="0.000697042">
        </testcase>
        <testcase classname="tests/main/permissions/PermissionManager.test.ts" name="PermissionManager &gt; Edge Cases &gt; should handle argument hashing with undefined/null values" time="0.001111564">
        </testcase>
    </testsuite>
    <testsuite name="tests/main/security/SecureStorage.test.ts" timestamp="2025-07-05T04:03:14.961Z" hostname="DESKTOP-HR2BSFJ" tests="22" failures="0" errors="0" skipped="0" time="0.020650632">
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Initialization &gt; should create singleton instance" time="0.002295405">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Initialization &gt; should check encryption availability" time="0.000943003">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Initialization &gt; should handle encryption not available" time="0.000264742">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should encrypt string successfully" time="0.003072661">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should decrypt string successfully" time="0.002274538">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should return plain text when encryption is not available" time="0.000911989">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should return plain text when decrypting non-encrypted data" time="0.000250201">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should handle encryption errors gracefully" time="0.003215531">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Encryption and Decryption &gt; should handle decryption errors gracefully" time="0.000805791">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should migrate plain text to encrypted format" time="0.000395048">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should return original value if already encrypted" time="0.000242064">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should get plain text value from encrypted storage" time="0.000242434">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should return plain text value as-is" time="0.000118377">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should return empty string for empty input" time="0.000165916">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; API Key Management Methods &gt; should detect encrypted values correctly" time="0.000201154">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should validate encryption successfully" time="0.000231657">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should fail validation when encryption is not available" time="0.000114302">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should fail validation on encryption error" time="0.000156231">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Validation &gt; should fail validation on data mismatch" time="0.00013399">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Edge Cases &gt; should handle empty strings in getPlainTextValue" time="0.000125084">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Edge Cases &gt; should handle decryption failure gracefully in getPlainTextValue" time="0.000245778">
        </testcase>
        <testcase classname="tests/main/security/SecureStorage.test.ts" name="SecureStorage &gt; Edge Cases &gt; should return plain text on failed encryption during migration" time="0.000233943">
        </testcase>
    </testsuite>
    <testsuite name="tests/renderer/components/SessionSidebar.test.tsx" timestamp="2025-07-05T04:03:14.970Z" hostname="DESKTOP-HR2BSFJ" tests="1" failures="0" errors="0" skipped="0" time="0.062216772">
        <testcase classname="tests/renderer/components/SessionSidebar.test.tsx" name="SessionSidebar &gt; creates a new chat when clicking + New Chat" time="0.060741118">
            <system-out>
SessionManager: No app storage found, checking for legacy chat history...
SessionManager: No legacy data found, creating default storage
SessionContext: Loading initial session data...
SessionContext: Loaded [33m0[39m sessions, current: [90mundefined[39m
SessionContext: Creating new session with options: {}
SessionManager: Created new session: session_1751688194076_3aiit37zk
SessionContext: Created and switched to new session: session_1751688194076_3aiit37zk

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/main/llm/providers/OllamaProvider.test.ts" timestamp="2025-07-05T04:03:14.971Z" hostname="DESKTOP-HR2BSFJ" tests="45" failures="0" errors="0" skipped="0" time="0.065839658">
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Constructor &gt; should initialize with provided config" time="0.00803177">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Constructor &gt; should use default URL when none provided" time="0.000634873">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should test connection successfully" time="0.00655611">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle connection refused error" time="0.000671173">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle connection error with cause" time="0.000550008">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle HTTP errors" time="0.000900567">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Connection Testing &gt; should handle timeout errors" time="0.000524515">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should get available models successfully" time="0.001865409">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle empty model list" time="0.00108116">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle missing models property" time="0.00217629">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle connection error when getting models" time="0.003439779">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should handle HTTP error when getting models" time="0.00079661">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Management &gt; should format sizes correctly" time="0.002136529">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should send message successfully" time="0.002776114">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should send message with custom options" time="0.000916764">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should send message with tools" time="0.003789048">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should handle HTTP error when sending message" time="0.000607772">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should handle network error when sending message" time="0.000692811">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Sending &gt; should handle finish reason based on done status" time="0.000488224">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should stream message successfully" time="0.003837789">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle streaming with custom options" time="0.001031719">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle HTTP error when streaming" time="0.000713337">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle missing response body when streaming" time="0.000442089">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle invalid JSON in streaming response" time="0.000629591">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should handle incomplete streaming data" time="0.001019276">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Streaming &gt; should release reader lock even on error" time="0.000801651">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should download model successfully" time="0.001271424">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should download model without progress callback" time="0.000730205">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should handle HTTP error when downloading" time="0.000609875">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should handle missing response body when downloading" time="0.000733619">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should handle invalid JSON in download response" time="0.005148424">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Download &gt; should release reader lock even on download error" time="0.002708391">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Deletion &gt; should delete model successfully" time="0.000992568">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Deletion &gt; should handle HTTP error when deleting model" time="0.000487636">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Model Deletion &gt; should handle network error when deleting model" time="0.000605823">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Formatting &gt; should format regular messages correctly" time="0.000270769">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Formatting &gt; should format tool response messages correctly" time="0.000196052">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Message Formatting &gt; should format messages with tool calls correctly" time="0.000296297">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle timeout errors properly" time="0.000182646">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle connection refused errors" time="0.000193646">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle authentication errors" time="0.000214064">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle rate limit errors" time="0.000198878">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle server errors" time="0.000157986">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle unknown errors" time="0.000137379">
        </testcase>
        <testcase classname="tests/main/llm/providers/OllamaProvider.test.ts" name="OllamaProvider &gt; Error Handling &gt; should handle non-Error objects" time="0.000147102">
        </testcase>
    </testsuite>
    <testsuite name="tests/main/llm/providers/OpenRouterProvider.test.ts" timestamp="2025-07-05T04:03:14.989Z" hostname="DESKTOP-HR2BSFJ" tests="46" failures="0" errors="0" skipped="0" time="0.071495056">
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Constructor &gt; should initialize with provided config" time="0.004146897">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should test connection successfully with valid API key" time="0.005625744">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should fail connection test without API key" time="0.002220755">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should handle HTTP errors during connection test" time="0.000490877">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should handle network errors during connection test" time="0.000561657">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Connection Testing &gt; should handle timeout during connection test" time="0.000544729">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should get available models successfully" time="0.002281144">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle models without description" time="0.000792574">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle error when API key is missing" time="0.004370861">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle HTTP error when getting models" time="0.000542011">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Management &gt; should handle network error when getting models" time="0.000600912">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should send message successfully" time="0.002457268">
            <system-out>
OpenRouter: Response received: {
  hasContent: [33mtrue[39m,
  hasToolCalls: [33mfalse[39m,
  toolCallsCount: [33m0[39m,
  toolCalls: [90mundefined[39m,
  finishReason: [32m&apos;stop&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should send message with custom options" time="0.00135028">
            <system-out>
OpenRouter: Response received: {
  hasContent: [33mtrue[39m,
  hasToolCalls: [33mfalse[39m,
  toolCallsCount: [33m0[39m,
  toolCalls: [90mundefined[39m,
  finishReason: [32m&apos;stop&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should send message with tools" time="0.002645479">
            <system-out>
OpenRouter: Sending tools: { count: [33m1[39m, toolNames: [ [32m&apos;get_weather&apos;[39m ] }

OpenRouter: Response received: {
  hasContent: [33mtrue[39m,
  hasToolCalls: [33mtrue[39m,
  toolCallsCount: [33m1[39m,
  toolCalls: [ { id: [32m&apos;call_123&apos;[39m, type: [32m&apos;function&apos;[39m, function: [36m[Object][39m } ],
  finishReason: [32m&apos;tool_calls&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle missing API key" time="0.001242422">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle HTTP error response" time="0.001173656">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle missing choices in response" time="0.000859564">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle response with empty content" time="0.000766032">
            <system-out>
OpenRouter: Response received: {
  hasContent: [33mfalse[39m,
  hasToolCalls: [33mfalse[39m,
  toolCallsCount: [33m0[39m,
  toolCalls: [90mundefined[39m,
  finishReason: [32m&apos;stop&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Sending &gt; should handle network error" time="0.000640147">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should stream message successfully" time="0.002667422">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle streaming with custom options" time="0.001107233">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle missing API key during streaming" time="0.001322095">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle HTTP error during streaming" time="0.001191396">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle missing response body during streaming" time="0.000579859">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle invalid JSON in streaming response" time="0.00134701">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should handle incomplete streaming data" time="0.002956429">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Streaming &gt; should release reader lock even on error" time="0.000736506">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should get model info successfully" time="0.00117817">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should return null for non-existent model" time="0.000494535">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should handle missing API key" time="0.000475001">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should handle HTTP errors other than 404" time="0.000294902">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Model Info &gt; should handle network errors" time="0.000282449">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should get credit balance successfully" time="0.000980841">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should return null when no API key configured" time="0.000511449">
            <system-out>
Provider config updated: Test OpenRouter

            </system-out>
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should return null on HTTP error" time="0.000322624">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should return null when credit_balance is missing" time="0.000305678">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Credit Balance &gt; should handle network errors" time="0.000675481">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Formatting &gt; should format regular messages correctly" time="0.000850353">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Formatting &gt; should format tool response messages correctly" time="0.00081545">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Message Formatting &gt; should format messages with tool calls correctly" time="0.000249663">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle insufficient credits error" time="0.013092834">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle rate limit error" time="0.000442672">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle model validation error" time="0.000185771">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle timeout errors" time="0.000176699">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should handle timeout message errors" time="0.000189405">
        </testcase>
        <testcase classname="tests/main/llm/providers/OpenRouterProvider.test.ts" name="OpenRouterProvider &gt; Error Handling &gt; should fall back to base error handling" time="0.000192364">
        </testcase>
    </testsuite>
    <testsuite name="tests/renderer/components/MCP/McpIntegration.test.tsx" timestamp="2025-07-05T04:03:15.013Z" hostname="DESKTOP-HR2BSFJ" tests="27" failures="0" errors="0" skipped="0" time="0.724068236">
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; renders without crashing" time="0.055129857">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; shows loading state initially" time="0.011405882">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; loads and displays servers successfully" time="0.023542326">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; displays empty state when no servers configured" time="0.088600788">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; displays error state when loading fails" time="0.01691194">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Initial Rendering and Loading &gt; handles network errors during loading" time="0.015338295">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Display and Status &gt; displays server status badges correctly" time="0.024199094">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Display and Status &gt; displays transport information correctly" time="0.033661549">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Display and Status &gt; displays status icons correctly" time="0.032967588">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; toggles server enabled state successfully" time="0.057312361">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; handles server toggle errors" time="0.024174961">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; removes server with confirmation" time="0.033513541">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; cancels server removal when user declines confirmation" time="0.020384383">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Management Actions &gt; handles server removal errors" time="0.032036829">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Wizard Integration &gt; opens server wizard when add server button is clicked" time="0.023474948">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Wizard Integration &gt; opens wizard from empty state" time="0.029916721">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Server Wizard Integration &gt; refreshes server list when server is added via wizard" time="0.030521328">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; handles undefined server data gracefully" time="0.004613042">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; handles malformed server data" time="0.006804438">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; retries loading on initial failure with user action" time="0.007233324">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Error Handling and Edge Cases &gt; handles rapid server state changes" time="0.039893649">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; has proper ARIA labels and roles" time="0.023006681">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; supports keyboard navigation" time="0.017855471">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; provides clear loading states" time="0.02313669">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Accessibility and UX &gt; provides clear error messages" time="0.01430353">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Integration with Settings &gt; calls onSettingsUpdate when servers change" time="0.021480075">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpIntegration.test.tsx" name="McpIntegration &gt; Integration with Settings &gt; reloads servers when settings prop changes" time="0.009857614">
        </testcase>
    </testsuite>
    <testsuite name="tests/renderer/components/MCP/McpServerWizard.test.tsx" timestamp="2025-07-05T04:03:15.024Z" hostname="DESKTOP-HR2BSFJ" tests="13" failures="0" errors="0" skipped="0" time="0.488345002">
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Basic Rendering &gt; renders without crashing when open" time="0.073867668">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Basic Rendering &gt; does not render when closed" time="0.002241126">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Basic Rendering &gt; displays wizard steps" time="0.019499194">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Form Validation &gt; validates server name is required" time="0.115638902">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Form Validation &gt; validates command for STDIO transport" time="0.142383506">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Connection Testing &gt; tests connection successfully" time="0.019714107">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Connection Testing &gt; handles connection test failure" time="0.018889136">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Server Creation &gt; creates server successfully" time="0.020664392">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Server Creation &gt; handles server creation error" time="0.024983965">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; User Interactions &gt; closes when close button is clicked" time="0.014364724">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; User Interactions &gt; calls onServerAdded when server is created" time="0.014583282">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Accessibility &gt; has proper ARIA labels" time="0.010375104">
        </testcase>
        <testcase classname="tests/renderer/components/MCP/McpServerWizard.test.tsx" name="McpServerWizard &gt; Accessibility &gt; supports keyboard navigation" time="0.006039362">
        </testcase>
    </testsuite>
</testsuites>
